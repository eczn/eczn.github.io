{"code":0,"data":{"type":"tsx","meta":{"id":"is-esm-robust-enough-in-broswer","title":"浏览器内的 ESM 是否已足够强大","author":"eczn","time":"2022-01-04T15:33:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./is-esm-robust-enough-in-broswer/index.blog.js","ssrContent":"<div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:33.3%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">浏览器内运行原生 ESM 一直是众多 Web 佬所追求的，尤其从去年 vite 的流行开始，越来越多人在浏览器内直接用 ESM 进行开发，而约莫一年后的现在，2022 年，我们能否有把握直接将 ESM 特性用于生产环境 ?</div></div><div style=\"width:66.6%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">生产环境上 ESM</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div></div><h1 id=\"esm-compatibility\" class=\"std-title --fontTitle\"><a href=\"#esm-compatibility\" class=\"markdownIt-Anchor\">#</a> ESM 兼容性怎么样<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">很多人觉得兼容性是最大的问题，但实际上时间问题其实并不是问题。具体查阅了 caniuse 看了下，整体还算可以，但还不够，应该要 99%+ 才比较适合上。</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">看样子 ESM 全面流行似乎只是时间问题了，各大厂商都支持了好一段时间了。</div><div class=\"std-img-dynamic-wrapper\" style=\"width:100%;display:block;column-span:all;margin-top:1em;margin-bottom:1em\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:54.81%\"><div class=\"xhr-progress-printer\" style=\"background:none\"><div>0%</div><div class=\"__smalltext\">XhrUnsent</div></div><img class=\"std-img-dymanic-main\" data-image-src=\"/tsxs-esm/caniuse-esm.6f083865f5d94386.png\" style=\"z-index:10\"/><img class=\"std-img-dymanic-main r-link __mosaic \" src=\"/tsxs-esm/caniuse-esm.6f083865f5d94386.png.mosaic.png\" style=\"image-rendering:pixelated;z-index:12\"/></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">比起兼容性，更麻烦的是很多模块并没有 ESM 导出，直接走的 CJS 打包，根本没法用 —— 虽然这也是时间问题，因为现在社区很多人在搞 pure-esm-package 了，也就是纯 ESM 导出的模块，不搞 CJS 了，而其中有的人甚至是直接搞 pure-typescript-package 了 —— 不编译直接导出 TS 源码</div><h1 id=\"esm-path-resolve\" class=\"std-title --fontTitle\"><a href=\"#esm-path-resolve\" class=\"markdownIt-Anchor\">#</a> ESM 路径解析问题<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:41.1%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">ESM 在路径解析 (resolve) 的时候必须要有参照，否则无法解析，比如右边的 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">./add.js</div></div></div><div style=\"width:58.8%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs js rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">import</span> add <span class=\"token keyword\">from</span> <span class=\"token string\">'./add.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">浏览器必须要知道其中的 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">.</div> 是什么才能正确解析出这个 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">./add.js</div> 的真实 url 链接，比方说这个点取值为 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">example.com/js/</div> 那么最终可以解析为 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">example.com/js/add.js</div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">对于浏览器来说得到参照点并最终得到这样的完整 URL 才是 fetchable 的、executable 的</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:52.3%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs jsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token string\">'res:'</span><span class=\"token punctuation\">,</span> result\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div><div style=\"width:47.6%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">然而，在这个例子里 react 的引入并没有点，它不是一个相对路径; 像这样的模块称为 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">裸模块 (bare module)</div> <br/>在 nodejs 里裸模块通常解析到 package.json 目录所在的 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">node_modules/</div> 下 <br/>而这并不是浏览器标准，而是 npm 标准，我们总不能解析到 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">example.com/node_modules/react.js</div> 吧?</div></div></div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:33.3%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">为了解决裸模块的加载问题，Web 工作组提出了 import-maps 特性以允许开发者定义模块和 URL 的映射关系。<br/>比如这里这个定义了 react 解析为 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">HOST/node_modules/react</div></div></div><div style=\"width:66.6%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs html rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>importmap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token string-property property\">\"imports\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>    <span class=\"token string-property property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/node_modules/react\"</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>    <span class=\"token string-property property\">\"lodash\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/node_modules/lodash\"</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">import-map 能搞定全部问题吗？并不能，比如解决不了 ./add 到底是 add.js 还是 add/index.js 的问题?</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">长久以来，我们太习惯于 nodejs 的馈赠了，ESM 在编译成 ES5 require 的情况下，从来都不是一个静态过程，它是一个动态的递归过程。更重要的是非 js 模块的 ESM 导入特定后缀的过程比想象中的复杂 —— 虽然这也是习以为常的技术馈赠 (webpack)</div><div class=\"std-code\"><pre class=\"prismjs js rally-runner _center \" ><span class=\"token keyword\">import</span> a <span class=\"token keyword\">from</span><span class=\"token string\">'./add'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> aa <span class=\"token keyword\">from</span> <span class=\"token string\">'./add.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> aaa <span class=\"token keyword\">from</span> <span class=\"token string\">'./add/index'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> aaaa <span class=\"token keyword\">from</span> <span class=\"token string\">'./add/index.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> aaaaa <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.module.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> aaaaaa <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.module.css.js'</span><span class=\"token punctuation\">;</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">除此之外还有更加严肃的问题，标准并没有定义 importmap 是手写的还是 auto-generated 的，难道要手写 importmap ?</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">如果是手写，我宁可不用；如果是生成的，谁来生成，webpack 吗？一个 Web 标准显然不应该反向依赖 webpack 等打包工具</div><h1 id=\"non-js-module-import\" class=\"std-title --fontTitle\"><a href=\"#non-js-module-import\" class=\"markdownIt-Anchor\">#</a> 非 JS 模块导入<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">也就是说如何导入 png 后缀的文件, 这也是 webpack 的技术馈赠</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">import</span> image <span class=\"token keyword\">from</span> <span class=\"token string\">'./image.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?</span></pre></div><h1 id=\"esm-is-not-very-good-for-production\" class=\"std-title --fontTitle\"><a href=\"#esm-is-not-very-good-for-production\" class=\"markdownIt-Anchor\">#</a> 还没有强大到足以支撑生产环境<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">本文完 —— 屁咧，写本文更想分享记录的是: 本文是基于 ESM 实现的 —— 也就是说通过写 .tsx 来写博客。<br/>点击立即更新随机数: <span>0.2957776967428314</span></div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// end-txt.tsx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">P</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rally/@@'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">,</span> setRand<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setRand</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>    <span class=\"token keyword\">const</span> timer<span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>      <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">P</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>    本文完 —— 屁咧，写本文更想分享记录的是:\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>    本文是基于 ESM 实现的\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>    —— 也就是说通过写 .tsx 来写博客。</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>    点击立即更新随机数: </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>rand<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">P</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">在具体实现的时候不可避免地遇到了前文所说的问题，大概解决了一波，核心还是在于如何处理动态解析</div><blockquote lang=\"en\" class=\"std-quote\"><span class=\"std-quote-text\">resolve 从来都不是一个静态过程, 读取特定路径的过程比想象中的复杂</span></blockquote><h1 id=\"resolve-path-by-bundler\" class=\"std-title --fontTitle\"><a href=\"#resolve-path-by-bundler\" class=\"markdownIt-Anchor\">#</a> 构建器补全 resolve 结果<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">构建期间补全相关 extension (这里有个坑 tsc 不支持补全这个 extension，所以我换 rollup 了）</div><div class=\"std-img-dynamic-wrapper\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:41.88%\"><div class=\"xhr-progress-printer\" style=\"background:none\"><div>0%</div><div class=\"__smalltext\">XhrUnsent</div></div><img class=\"std-img-dymanic-main\" data-image-src=\"/tsxs-esm/resolve-path-by-bundler.02b7f5898602c475.png\" style=\"z-index:10\"/><img class=\"std-img-dymanic-main r-link __mosaic \" src=\"/tsxs-esm/resolve-path-by-bundler.02b7f5898602c475.png.mosaic.png\" style=\"image-rendering:pixelated;z-index:12\"/></div></div><h1 id=\"systemjs\" class=\"std-title --fontTitle\"><a href=\"#systemjs\" class=\"markdownIt-Anchor\">#</a> 使用 System.js<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">System.js 是一个开源项目，用于 polyfill ESM，让老浏览器也能支持 ESM 模块加载, TypeScript/Rollup 在编译打包的时候可以配置输出为 System.js 模块，比如：</div><div class=\"std-code\"><pre class=\"prismjs ts rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// ./src/test.ts</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token comment\">//// 编译后变为 ////</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token comment\">// ./dist/test.js</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"react\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>exports_1<span class=\"token punctuation\">,</span> context_1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>  <span class=\"token keyword\">var</span> react_1<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>  <span class=\"token keyword\">var</span> __moduleName <span class=\"token operator\">=</span> context_1 <span class=\"token operator\">&amp;&amp;</span> context_1<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>    <span class=\"token keyword\">return</span> react_1<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>      <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>  <span class=\"token function\">exports_1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span> Hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>    setters<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>react_1_1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>        react_1 <span class=\"token operator\">=</span> react_1_1<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>      <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>    <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">然后在浏览器或者 nodejs 环境下就可以通过 systemjs 加载这个模块了</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" fileName=\"browser.tsx\"><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Hello <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./dist/test.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// import { Hello } from './dist/test';</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div><h1 id=\"dynamic-inject\" class=\"std-title --fontTitle\"><a href=\"#dynamic-inject\" class=\"markdownIt-Anchor\">#</a> 裸模块运行时注入<i data-minimap=\"Ignore\"> ↵ </i></h1><div style=\"float:right;width:55%;box-sizing:border-box;margin-left:1em\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// my-blog.tsx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Hello <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rally/@@'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token comment\">// 运行时注入</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Hello</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">通过 systemjs 硬点 &#x27;rally/@@&#x27; 对应模块，以此来注入组件帮助编写内容。 <br/>而借助于完全的 js 运行时，写文章的表现力大大提高了：<span>「点击计数器 n=0」</span></div><h1 id=\"ssr-and-hotreload\" class=\"std-title --fontTitle\"><a href=\"#ssr-and-hotreload\" class=\"markdownIt-Anchor\">#</a> 直出和 hotreload<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">直出的话用 system.js 将编译后的组件读取并渲染即可，同时注意同构的问题，但这里通过 system.js 引入 js 的话会让 system.js cache 住文件导致不能 hot reload</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:38.4%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">对比 .md 文件，在 md 被改写的时候重新跑编译就可以实现 hotreload，但这个办法对 tsx 博文不太适用，执行过的模块会 cached , 不会重新执行。</div></div><div style=\"width:61.5%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// 改了 add.tsx 后, 再次 import</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  a <span class=\"token operator\">===</span> b <span class=\"token comment\">// true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div></div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs bash rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\"># 起子进程并收集 stdout</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\"># 并用 JSON.parse 解析它</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>$ <span class=\"token function\">node</span> relax-esm-node.js\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>略<span class=\"token punctuation\">}</span>, <span class=\"token string\">\"&lt;div>略&lt;/div>\"</span><span class=\"token punctuation\">]</span></pre></div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">在查阅了 Systemjs 源码后发现它的 cache 是内置的，没有暴露，也就是说没办法做到删掉 cache 的方式重新 reload，最后的解决办法是起子进程来实现加载和做 html 直出以此实现 hotreload</div></div></div><h1 id=\"ending\" class=\"std-title --fontTitle\"><a href=\"#ending\" class=\"markdownIt-Anchor\">#</a> 末尾<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">总的来说，现阶段 ESM 还不够强大到足以支撑生产环境，如果真的想上，建议配合 systemjs 来做，尤其需要注意介入动态的 resolve 过程。</div>","props":{"codeEndText":"// end-txt.tsx\nimport React from 'react';\nimport { P } from 'rally/@@';\n\nexport default () => {\n  const [rand, setRand] = React.useState(Math.random());\n  const update = () => setRand(Math.random());\n\n  React.useEffect(() => {\n    const timer= setInterval(update, 500);\n    return () => {\n      clearInterval(timer);\n    }\n  }, []);\n\n  return <P onClick={update}>\n    本文完 —— 屁咧，写本文更想分享记录的是:\n    本文是基于 ESM 实现的\n    —— 也就是说通过写 .tsx 来写博客。<br />\n    点击立即更新随机数: <span>{rand}</span>\n  </P>\n}\n"},"tocStack":[{"id":"esm-compatibility","level":1,"text":"ESM 兼容性怎么样"},{"id":"esm-path-resolve","level":1,"text":"ESM 路径解析问题"},{"id":"non-js-module-import","level":1,"text":"非 JS 模块导入"},{"id":"esm-is-not-very-good-for-production","level":1,"text":"还没有强大到足以支撑生产环境"},{"id":"resolve-path-by-bundler","level":1,"text":"构建器补全 resolve 结果"},{"id":"systemjs","level":1,"text":"使用 System.js"},{"id":"dynamic-inject","level":1,"text":"裸模块运行时注入"},{"id":"ssr-and-hotreload","level":1,"text":"直出和 hotreload"},{"id":"ending","level":1,"text":"末尾"}]}}