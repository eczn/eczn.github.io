{"code":0,"data":{"type":"tsx","meta":{"id":"syuuchuuryoku-240310","title":"注意力训练 toUpperCase","author":"eczn","category":"注意力训练","time":"2024-03-10T13:22:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./syuuchuuryoku/240310/index.blog.js","ssrContent":"<div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">实现一个 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">toUpperCase(str: string): string</div> 要求能将 str 中出现的 a-z 字母转成大写形式，比如 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">&#x27;你好 hello&#x27;</div> 变成 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">&#x27;你好 HELLO&#x27;</div></div><div><h1 id=\"h1\" class=\"std-title --fontTitle\"><a href=\"#h1\" class=\"markdownIt-Anchor\">#</a> 解析<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">也许可以这样，重复 26 次判断，或者弄一个 map 上去</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">function</span> <span class=\"token function\">charToUpperCase</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ch <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token comment\">// 重复 26 次 a-z</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">但是注意到 &#x27;a&#x27; 和 &#x27;A&#x27; 的 ASCII 编码分别为 0x61 和 0x41, 展开来看其实只有 1 bit 的区别:</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token string\">'a'</span> <span class=\"token operator\">=></span> <span class=\"token number\">0x61</span> <span class=\"token operator\">=></span> <span class=\"token number\">01100001</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>                 <span class=\"token operator\">|</span> 注意只有这一位不同\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token string\">'A'</span> <span class=\"token operator\">=></span> <span class=\"token number\">0x41</span> <span class=\"token operator\">=></span> <span class=\"token number\">01000001</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">因此可以用位运算或者直接 +- 0x20 去优化了, 这里只贴一部分核心实现</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">function</span> <span class=\"token function\">charToUpperCase</span><span class=\"token punctuation\">(</span>ch<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">>=</span> <span class=\"token number\">0x41</span> <span class=\"token operator\">&amp;&amp;</span> code <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x7a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// a-z</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>    <span class=\"token keyword\">return</span> code <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b11011111</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">应该是早期计算机大佬们在设计 ASCII 的时候就考虑到为了使用位运算而特意这样设计的编码规则。</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">此外，这种设计对于键盘的底层硬件实现也很友好，将 Shift 键短接到「不同的那个位」上，按下去的时候实际就做了位运算来实现转大小写了</div></div>","props":{},"tocStack":[{"id":"h1","level":1,"text":"解析"}]}}