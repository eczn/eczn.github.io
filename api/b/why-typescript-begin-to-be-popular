{"code":0,"data":{"type":"markdown","meta":{"id":"why-typescript-begin-to-be-popular","title":"TypeScript 为何流行","date":"2021-08-1 03:00:00","category":"编程语言","tags":[],"type":"article","appTitle":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","author":"eczn","imgs":[],"time":"2021-07-31T19:00:00.000Z","isDraft":false,"fileDeps":[],"wordCount":1522},"nodes":[{"type":"tag","children":[{"type":"text","data":"最近几年，TypeScript 越来越流行 —— 这种流行体现在整个前端圈里：从 React TSX 到 Angular 以及今年 Vue 3 TypeScript，又或者我自己主观上感受到身边的人都在使用 TypeScript 了 —— 很多人都说，写了 TS 就不愿意再写 JS 了，为什么 TypeScript 会变得如此流行呢？"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#用脚投票","className":"markdownIt-Anchor"}},{"type":"text","data":" 用脚投票"}],"name":"h1","attribs":{"id":"用脚投票"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"很显然，一定是 TypeScript 解决了 JavaScript 用户所遇到的痛点，导致各类不同的 JS 用户用脚投票了。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#丰富的语法提示","className":"markdownIt-Anchor"}},{"type":"text","data":" 丰富的语法提示"}],"name":"h2","attribs":{"id":"丰富的语法提示"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"在 VSCode 等支持 TS 的编辑器中可以享受到真正意义上的语法提示（不是项目关键字搜索的残废玩意）能支持常用 IDE 功能，如重命名，重构，移动文件等等，极大的提高了开发效率。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"TypeScript 搭配 VSCode 使用"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 丰富的语法提示"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 想偷懒的用脚投票"}],"name":"p","attribs":{}},{"type":"text","data":"\n"}],"name":"blockquote","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#多人-js-项目开发","className":"markdownIt-Anchor"}},{"type":"text","data":" 多人 JS 项目开发"}],"name":"h2","attribs":{"id":"多人-js-项目开发"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"多人 JS 项目开发如果只用 JS，项目将很快变成屎山，别人写的你看不懂，你写的别人不一定懂。实际开发中要各种调试和 console.log，关于这点参与过实际开发的朋友应该深有体会了，解决这些问题需要提高代码质量，而提高代码质量最快的途径是引入一个禁用 any 并开启严格模式的 TypeScript。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"TypeScript 各类新特性"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 严格模式且 eslint 禁用 any 即可快速提高代码质量"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 做技术选型的用脚投票"}],"name":"p","attribs":{}},{"type":"text","data":"\n"}],"name":"blockquote","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#ecmascript-转译","className":"markdownIt-Anchor"}},{"type":"text","data":" ECMAScript 转译"}],"name":"h2","attribs":{"id":"ecmascript-转译"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"作为写 js 的，大概率是自己整过 babel / webpack 等配置的，一般来说都是找文档到处抄，有时还会遇到各种奇奇怪怪的问题 …"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"而 TS 作为转译器，可以转译绝大多数 ECMAScript 特性，使用极其简单，配置 tsconfig.json 的 target 即可 —— 在大部分情况下，有了 tsc 你就不需要 babel 了。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"TypeScript TSC 转译"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 快速转译各个版本的 ECMAScript"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 不想整一坨 babel/webpack 配置的用脚投票"}],"name":"p","attribs":{}},{"type":"text","data":"\n"}],"name":"blockquote","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#社区-typescript-运动","className":"markdownIt-Anchor"}},{"type":"text","data":" 社区 TypeScript 运动"}],"name":"h2","attribs":{"id":"社区-typescript-运动"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"TypeScript 运动愈演愈烈，现在社区主流框架和新概念都是 typescript 兼容的，都有提供 typescript 解决方案。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"JS 社区越来越离不开 TS"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 大家都在用, 用过的都说好"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 大家自然而然的用脚投票了"}],"name":"p","attribs":{}},{"type":"text","data":"\n"}],"name":"blockquote","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#类型检查","className":"markdownIt-Anchor"}},{"type":"text","data":" 类型检查"}],"name":"h2","attribs":{"id":"类型检查"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"类型检查或许并不是想象中的检查个 undefined 那么简单，代码里的类型实质上是构造了一个大命题 —— 这段代码的 TS 类型安全吗，TypeScript 的作用就是去机械地根据语法对其进行证明，如果有类型错误，证明就不会完成，程序也是不安全的，这也是为什么不要使用 any 的原因。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"TypeScript 类型检查"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 编译器证明类型命题"},{"type":"tag","children":[],"name":"br","attribs":{}},{"type":"text","data":"\n==&gt; 程序正确性爱好者用脚投票"}],"name":"p","attribs":{}},{"type":"text","data":"\n"}],"name":"blockquote","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[],"name":"hr","attribs":{}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"tag","children":[{"type":"text","data":"#"}],"name":"a","attribs":{"href":"#javascript-的未来","className":"markdownIt-Anchor"}},{"type":"text","data":" JavaScript 的未来"}],"name":"h1","attribs":{"id":"javascript-的未来"}},{"type":"text","data":"\n"},{"type":"tag","children":[{"type":"text","data":"如果 JS 在这几年内都解决不了大家的问题，它很有可能会成为浏览器里的汇编，成为一门很重要但是没什么人直接写的语言。"}],"name":"p","attribs":{}},{"type":"text","data":"\n"}],"rawContent":""}}