{"code":0,"data":{"type":"tsx","meta":{"id":"parser-combinator","title":"Parser Combinator","author":"eczn","time":"2024-05-01T23:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./parser-combinator/index.blog.js","ssrContent":"<div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">学 moonbit 的过程中找到官网写的一个教程《现代编程思想》，写得非常好：</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://www.bilibili.com/video/BV1jg4y1d7FA\" target=\"_blank\" style=\"background-color:#e3e6e4\" class=\"std-link --fontSansSerif  _line\" data-minimap-color=\"#e3e6e4\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/www.bilibili.com?h=-834185150\" style=\"background-image:url(&quot;/get-favicon/www.bilibili.com?h=-834185150&quot;)\"></span><span class=\"std-link-txt\">Bilibili - 现代编程思想</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">尤其是其中的 parser combinator 又一次刷新了我对程序表达力的看法</div><h1 id=\"id\" class=\"std-title --fontTitle\"><a href=\"#id\" class=\"markdownIt-Anchor\">#</a> Parser Combinator 是什么呢？<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">所谓「词法解析」就是将扁平的字符串转为某种带结构的构造，比如解析字符串的 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">&quot;[1,23]&quot;</div> 使其变成 JS Array 对象 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">[1, 23]</div>，而 parser combinator 是一种写「词法解析」的通用范式，它将 parser 概括为判断字符串的第一个元素是否满足「规则」然后通过组合子的方式将这些「规则」构造成更复杂的「规则」最终得到完整的「词法解析」 —— 总之，利用这样的方式我们可以将下图里这样的表达式字符串转为某种描述表达式的 ADT：</div><div class=\"std-img-dynamic-wrapper\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:32.97%\"><img class=\"std-img-dymanic-main r-link __mosaic __loading\" src=\"/tsxs-esm/parser-combinator.75a73ef08396a5bd.png.mosaic.png\"/><img class=\"std-img-dymanic-main\" src=\"/tsxs-esm/parser-combinator.75a73ef08396a5bd.png\"/></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">基于这样的模式来写词法分析爽的不行（⬅️ 刚通宵完现在爽到根本没有困意）</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">具体直接看代码吧，曼妙无需多言（上次这么爽还是上次写 lisp 解释器的时候）</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">下面这个链接是 Moonbit 在线 VSCode Playground 分享代码，建议右侧运行并全屏使用（文件右键可以执行我上面的代码）</div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span><a href=\"https://try.moonbitlang.cn/#dbe28e82\" target=\"_blank\">https://try.moonbitlang.cn/#dbe28e82</a></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div class=\"std-window-content\"><div class=\"std-window-status\"><div class=\"std-icon \" style=\"font-size:13rem;height:13rem;width:13rem;overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><div class=\"r-link\" data-src=\"https://try.moonbitlang.cn/#dbe28e82\" data-message=\"这段是隐藏的, 加是为了直出 sitemap 索引\"></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">看完真的醍醐灌顶，深刻领教了 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">Combinator</div> 体现的函数式思想，再配合 ADT 带上满血版模式匹配写 parser 爽到飞起，现在再看大学编译原理用 C 写的各种 for 循环然后 getChar 风格的词法解析就会感觉丑到无法入眼了。（以下是完整代码，再贴一遍233）</div><div class=\"std-code\"><pre class=\"prismjs moonbit rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">000</span><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Token</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">001</span>  <span class=\"token class-name\">Value</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">002</span>  <span class=\"token class-name\">LParen</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">003</span>  <span class=\"token class-name\">RParen</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">004</span>  <span class=\"token class-name\">Plus</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">005</span>  <span class=\"token class-name\">Minus</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">006</span>  <span class=\"token class-name\">Multiply</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">007</span>  <span class=\"token class-name\">Divide</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">008</span><span class=\"token punctuation\">}</span> <span class=\"token function\">derive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">009</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">010</span><span class=\"token keyword\">type</span> <span class=\"token type-definition class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">011</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">012</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">parse</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Option</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">013</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">014</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">015</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">016</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">pchar</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Char</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Char</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">017</span>  <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">018</span>    <span class=\"token keyword\">if</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">019</span>      <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">020</span>      <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>~start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">021</span>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">022</span>      <span class=\"token class-name\">None</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">023</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">024</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">025</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">026</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">027</span><span class=\"token keyword\">let</span> symbol<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">028</span>  <span class=\"token keyword\">match</span> input <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">029</span>    <span class=\"token char\">'+'</span> <span class=\"token operator\">|</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">|</span> <span class=\"token char\">'*'</span> <span class=\"token operator\">|</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">|</span> <span class=\"token char\">'('</span> <span class=\"token operator\">|</span> <span class=\"token char\">')'</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">030</span>    _ <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">031</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">032</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">033</span>  <span class=\"token char\">'+'</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Plus</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">034</span>  <span class=\"token char\">'-'</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Minus</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">035</span>  <span class=\"token char\">'*'</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Multiply</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">036</span>  <span class=\"token char\">'/'</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">Divide</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">037</span>  <span class=\"token char\">'('</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">LParen</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">038</span>  <span class=\"token char\">')'</span> <span class=\"token operator\">=></span> <span class=\"token class-name\">RParen</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">039</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">040</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">041</span><span class=\"token keyword\">let</span> whitespace<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Char</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">042</span>  <span class=\"token keyword\">match</span> input <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">043</span>    <span class=\"token char\">' '</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">044</span>    _ <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">045</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">046</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">047</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">048</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">map</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">O</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">I</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">O</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">O</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">049</span>  <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">050</span>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">051</span>    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">052</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">053</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">054</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">055</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">and</span><span class=\"token punctuation\">[</span><span class=\"token constant\">V1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token constant\">V1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> parser2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token constant\">V2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">V1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">056</span>  <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">057</span>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">058</span>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>value2<span class=\"token punctuation\">,</span> rest2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> parser2<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">059</span>    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rest2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">060</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">061</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">062</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">063</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">or</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> parser2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">064</span>  <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">065</span>    <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">066</span>      <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> parser2<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">067</span>      <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> result <span class=\"token operator\">=></span> result\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">068</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">069</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">070</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">071</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">072</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">many</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">073</span>  <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">074</span>    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> rest <span class=\"token operator\">=</span> input\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">075</span>    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> cumul <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nil</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">076</span>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">077</span>      <span class=\"token keyword\">match</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">078</span>        <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">break</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">079</span>        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> new_rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">080</span>          rest <span class=\"token operator\">=</span> new_rest\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">081</span>          cumul <span class=\"token operator\">=</span> <span class=\"token class-name\">Cons</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> cumul<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">082</span>        <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">083</span>      <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">084</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">085</span>    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cumul<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">086</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">087</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">088</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">089</span><span class=\"token keyword\">let</span> zero<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">=></span> ch <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">090</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> _ <span class=\"token operator\">=></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">091</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">092</span><span class=\"token keyword\">let</span> one_to_nine<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">093</span>  <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">=></span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0x31</span> <span class=\"token operator\">&amp;&amp;</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x39</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">094</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">=></span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">095</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">096</span><span class=\"token keyword\">let</span> zero_to_nine<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">097</span>  <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">=></span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0x30</span> <span class=\"token operator\">&amp;&amp;</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x39</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">098</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> ch <span class=\"token operator\">=></span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">099</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">100</span><span class=\"token comment\">// number = %x30 / (%x31-39) *(%30-39)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">101</span><span class=\"token keyword\">let</span> value<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">102</span>  zero<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">103</span>    one_to_nine<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">104</span>      zero_to_nine<span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">105</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">106</span>      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> ls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ls<span class=\"token punctuation\">.</span><span class=\"token function\">fold_left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">107</span>        acc <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> cur\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">108</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> init<span class=\"token operator\">=</span>i<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">109</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">110</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">111</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">112</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">113</span><span class=\"token comment\">// 注意到输入流里有各种空格，因此完整 tokens 可以定义为下面这样:</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">114</span><span class=\"token keyword\">pub</span> <span class=\"token keyword\">let</span> tokens<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Token</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">115</span>  whitespace<span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>whitespace<span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">116</span>    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>symbols<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> symbols <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">117</span>    <span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">118</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">119</span><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">init</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">120</span>  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token string\">\"  + 123 313 +- /*22\"</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">121</span>  <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">122</span>  <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">to_array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">123</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">下面是根据上面的 TS 版本</div><div class=\"std-code\"><pre class=\"prismjs ts rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">000</span><span class=\"token comment\">// 根据 lexer.mbt 改的 ts 版</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">001</span><span class=\"token keyword\">type</span> <span class=\"token class-name\">Char</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">002</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">003</span><span class=\"token keyword\">type</span> <span class=\"token class-name\">Token</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">004</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-value'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">005</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-plus'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">006</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-minus'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">007</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-multiply'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">008</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-divide'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">009</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-lparen'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">010</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-rparen'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">011</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">012</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">013</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">014</span>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">015</span>    <span class=\"token keyword\">public</span> <span class=\"token function-variable function\">parse</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">016</span>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">017</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">018</span>  <span class=\"token generic-function\"><span class=\"token function\">map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">O</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">O</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">019</span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">O</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">020</span>      <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">021</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">022</span>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">023</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">024</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">025</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">026</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">027</span>  <span class=\"token generic-function\"><span class=\"token function\">and</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">V2</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>parser2<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">V2</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">V</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">028</span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">029</span>      <span class=\"token keyword\">const</span> res1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">030</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res1 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">031</span>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value1<span class=\"token punctuation\">,</span> rest1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res1<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">032</span>      <span class=\"token keyword\">const</span> res2 <span class=\"token operator\">=</span> parser2<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>rest1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">033</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res2 <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">034</span>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value2<span class=\"token punctuation\">,</span> rest2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res2<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">035</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rest2<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">036</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">037</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">038</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">039</span>  <span class=\"token function\">or</span><span class=\"token punctuation\">(</span>parser2<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">040</span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">041</span>      <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">042</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> parser2<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">043</span>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">044</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">045</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">046</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">047</span>  <span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">048</span>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">049</span>      <span class=\"token keyword\">let</span> rest <span class=\"token operator\">=</span> input\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">050</span>      <span class=\"token keyword\">let</span> cumul<span class=\"token operator\">:</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">051</span>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">052</span>        <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">053</span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">054</span>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> newRest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">055</span>        rest <span class=\"token operator\">=</span> newRest<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">056</span>        cumul<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">057</span>      <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">058</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>cumul<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">059</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">060</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">061</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">062</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">063</span><span class=\"token keyword\">function</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">predicate</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>char<span class=\"token operator\">:</span> Char<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span>Char<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">064</span>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lexer</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">065</span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">066</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Char<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">067</span>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">068</span>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">069</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">070</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">071</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">072</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">073</span><span class=\"token keyword\">let</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span>Token<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">074</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">075</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">076</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">077</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">078</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">079</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">080</span>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">081</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>char <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">082</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-plus'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">083</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-minus'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">084</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-multiply'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">085</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-divide'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">086</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-lparen'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">087</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>char <span class=\"token operator\">===</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-rparen'</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">088</span>  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不可能走到这里'</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">089</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">090</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">091</span><span class=\"token keyword\">let</span> whitespace<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span>Char<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">===</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">092</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">093</span><span class=\"token keyword\">let</span> zero<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=></span> ch <span class=\"token operator\">===</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">094</span><span class=\"token keyword\">let</span> oneToNine<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">095</span>  <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0x31</span> <span class=\"token operator\">&amp;&amp;</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x39</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">096</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=></span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">097</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">098</span><span class=\"token keyword\">let</span> zeroToNine<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">099</span>  <span class=\"token function\">pchar</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0x30</span> <span class=\"token operator\">&amp;&amp;</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x39</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">100</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">=></span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">101</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">102</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">103</span><span class=\"token keyword\">let</span> value<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span>Token<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">104</span>  zero<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">105</span>    oneToNine<span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">106</span>      zeroToNine<span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">107</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">108</span>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> ls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">109</span>      <span class=\"token keyword\">return</span> ls<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">110</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">111</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'token-value'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">112</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">113</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">114</span><span class=\"token keyword\">let</span> tokens<span class=\"token operator\">:</span> Lexer<span class=\"token operator\">&lt;</span>Token<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">115</span>  whitespace<span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">or</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">symbol</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span>whitespace<span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">116</span>    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">117</span>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_0<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">,</span> _1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">118</span>      <span class=\"token keyword\">return</span> token\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">119</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">120</span>    <span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">122</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">123</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">124</span><span class=\"token comment\">// test !!</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">125</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">126</span>  <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token string\">'  + 123 313 +- /*22'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">127</span>  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">128</span>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">129</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></div>","props":{},"tocStack":[{"id":"id","level":1,"text":"Parser Combinator 是什么呢？"}]}}