{"code":0,"data":{"categoryId":"注意力训练","list":[{"id":"what-is-syuuchuuryoku","title":"「注意力训练」是?","author":"eczn","category":"注意力训练","time":"2024-03-10T13:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"syuuchuuryoku-240310","title":"注意力训练 toUpperCase","author":"eczn","category":"注意力训练","time":"2024-03-10T13:22:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"syuuchuuryoku-240320","title":"注意力训练 mul","author":"eczn","category":"注意力训练","time":"2024-03-20T15:44:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"syuuchuuryoku-240322","title":"注意力训练 btoa atob","author":"eczn","category":"注意力训练","time":"2024-03-22T15:44:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"the-structure-and-interpretation-of-std-unicode-and-its-utf-encodings","title":"Unicode 标准及其 UTF 编码的构造和解释","author":"eczn","category":"注意力训练","time":"2024-03-31T11:50:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"syuuchuuryoku-240430","title":"注意力训练 sub","author":"eczn","category":"注意力训练","time":"2024-04-29T23:14:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"syuuchuuryoku-240508","title":"注意力训练 大数相加","author":"eczn","category":"注意力训练","time":"2024-05-08T14:20:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"syuuchuuryoku-240703","title":"注意力训练 代数视角里的类型","author":"eczn","category":"注意力训练","time":"2024-07-03T04:20:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0}],"current":{"type":"tsx","meta":{"id":"syuuchuuryoku-240322","title":"注意力训练 btoa atob","author":"eczn","category":"注意力训练","time":"2024-03-22T15:44:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./syuuchuuryoku/240322/index.blog.js","ssrContent":"<ol class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">1.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">实现 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">btoa(b: string): string</div> 支持将传入的 &quot;字符串&quot; 以 buffer 形式对待转化成 base64 编码</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">2.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">实现 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">atob(a: string): string</div> 支持将传入的 &quot;字符串&quot; 当成 base64 并将其还原成 buffer 形式 (即乱码串)</div></li></ol><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\x00\\x00'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// => 'AAA='</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token function\">atob</span><span class=\"token punctuation\">(</span><span class=\"token string\">'AAA='</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => '\\x00\\x00'</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">详细字典对照参考这张图:</div><div class=\"std-img-dynamic-wrapper --fontArticle\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:84.80%\"><img class=\"std-img-dymanic-main r-link __mosaic __loading\" src=\"/tsxs-esm/base64-alphabet-defined.ff86e550ebe1595c.png.mosaic.png\"/><img class=\"std-img-dymanic-main\" src=\"/tsxs-esm/base64-alphabet-defined.ff86e550ebe1595c.png\"/></div></div><h1 id=\"alphabet-query\" class=\"std-title --fontTitle\"><a href=\"#alphabet-query\" class=\"markdownIt-Anchor\">#</a> 字母表查询<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">我们需要实现字母表的两种查询:</div><ul class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-rect\"></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">根据 Binary 查出 Char, 比如 0b000001 =&gt; &#x27;B&#x27;</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-rect\"></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">根据 Char 反查出 Binary, 比如 &#x27;B&#x27; =&gt; 0b000001</div></li></ul><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">以下是实现</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// base64-alphabet.tsx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// 长度为 64, 下标就是其二进制编码 binary</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">const</span> base64Alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span> <span class=\"token operator\">+</span> \n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span> <span class=\"token operator\">+</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token string\">'0123456789'</span> <span class=\"token operator\">+</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token string\">'+/'</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span><span class=\"token comment\">// base64Alphabet 正查 map</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token keyword\">const</span> btoaMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>base64Alphabet<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>  <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span><span class=\"token comment\">// base64Alphabet 反查 map</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span><span class=\"token keyword\">const</span> atobMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>base64Alphabet<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>  <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>ch<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意这里跟上面是反过来的</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span><span class=\"token comment\">// 6bits 数字转 base64 字母</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_6bitsToa</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_6bit<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> btoaMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_6bit<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span><span class=\"token comment\">// base64 字母转 6bits 数字</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">aTo6bits</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ch<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> atobMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span></pre></div><h1 id=\"4to3\" class=\"std-title --fontTitle\"><a href=\"#4to3\" class=\"markdownIt-Anchor\">#</a> 4 个 base64 字母对应 3 字节<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">一旦注意到 4 个 base64 字母对应 3 字节，这问题就直观了, 不过具体处理起来大部分时间在纠结左移右移:</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// eczn_btoa_v1.tsx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> _6bitsToa <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./base64-alphabet'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token comment\">/**\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span> * 注意到：\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span> * 3 个字节共 3 * 8 = 24 位\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span> * 4 个 base64 字母共 4 * 6 = 24 位\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span> * 因此可以三个字节三个字节的去处理,\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span> * 三个字节每个位跟 base64 字母的对应关系:\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span> *\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span> *    000000000000000000000000  (共 24 位)\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span> *    !!!!!!\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span> *          @@@@@@\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span> *                $$$$$$\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span> *                      %%%%%%  (每行对应一个字母, 各占6位)\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span> */</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eczn_btoa_v1</span><span class=\"token punctuation\">(</span>buf<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>    <span class=\"token keyword\">const</span> b0 <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>    <span class=\"token comment\">// 传了 = 或者空了就当成 0 看待</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>    <span class=\"token keyword\">const</span> b1 <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>    <span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>    <span class=\"token comment\">// 111001 111001 101000 000000</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>    <span class=\"token comment\">// !!!!!! !!==== ====xx xxxxxx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span>    <span class=\"token keyword\">const</span> _1 <span class=\"token operator\">=</span> <span class=\"token function\">_6bitsToa</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">29</span>      <span class=\"token comment\">// 取出 b0 的高 6 位</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">30</span>      <span class=\"token punctuation\">(</span>b0 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b11111100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">31</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">32</span>    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>_1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">33</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">34</span>    <span class=\"token keyword\">const</span> _2 <span class=\"token operator\">=</span> <span class=\"token function\">_6bitsToa</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">35</span>      <span class=\"token comment\">// 取出 b0 的低 2 位,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">36</span>      <span class=\"token comment\">// 然后再拼接 b1 的高 4 位</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">37</span>      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b0 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b00000011</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b11110000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">38</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">39</span>    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">40</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">41</span>    <span class=\"token comment\">// 填 = 等于号处理，然后 break 掉</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">42</span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">43</span>      result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">44</span>      result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">45</span>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">46</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">47</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">48</span>    <span class=\"token keyword\">const</span> _3 <span class=\"token operator\">=</span> <span class=\"token function\">_6bitsToa</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">49</span>      <span class=\"token comment\">// 取 b1 的低四位，</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">50</span>      <span class=\"token comment\">// 然后再拼接 b2 的高 2 位</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">51</span>      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b1 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b00001111</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b2 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b11000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">52</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">53</span>    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>_3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">54</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">55</span>    <span class=\"token comment\">// 填 = 等于号处理，然后 break 掉</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">56</span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">57</span>      result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">58</span>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">59</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">60</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">61</span>    <span class=\"token comment\">// 取 b2 的低 6 位</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">62</span>    <span class=\"token keyword\">const</span> _4 <span class=\"token operator\">=</span> <span class=\"token function\">_6bitsToa</span><span class=\"token punctuation\">(</span>b2 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b00111111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">63</span>    result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>_4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">64</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">65</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">66</span>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">67</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">我们手动对齐了 4 和 3 的 bits 位差，因此代码看起来特别糟糕, 如上各种 &lt;&lt; 和 &gt;&gt;, 最关键是 = 等于号的填充写的很恶心，因为 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">i += 3</div> 的原因就会导致出现 undefined 的问题，因此要特别小心出问题，实现后的效果如下：</div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><style>\n        .input-outp-demo > * {\n          box-sizing: border-box;\n          margin-bottom: .8em;\n          white-space: pre-wrap;\n          word-break: break-all;\n        }\n        .input-outp-demo {\n          padding: 1em 2em;\n          box-sizing: border-box;\n          font-family: var(--fontCode);\n        }\n\n        .input-outp-demo input {\n          display: block;\n          padding: .2em .5em;\n          width: 100%;\n        }\n      </style><div class=\"input-outp-demo\"><div>eczn_btoa_v1(\"\\u0000\\u0000@\") ===></div><div>\"AABA\"</div><input placeholder=\"输入 json string (乱码串)\" value=\"&quot;\\u0000\\u0000@&quot;\"/></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><h1 id=\"syuuuuuchuuuuuu\" class=\"std-title --fontTitle\"><a href=\"#syuuuuuchuuuuuu\" class=\"markdownIt-Anchor\">#</a> 但是, 注意到 ...<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">注意到 int32 本身就可以当成 4 字节 buffer 来用, 类比到 ts 的 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">number</div> 它也可以实现类似功用，那么基于这样的想法就可以避免前面版本的 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">i += 3</div> 的复杂处理了, 因此写出第二个版本 eczn_btoa_v2</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// eczn_btoa_v2.tsx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> _6bitsToa <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./base64-alphabet'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eczn_btoa_v2</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token keyword\">let</span> buf <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token keyword\">let</span> bitCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>    <span class=\"token keyword\">const</span> b0 <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>    buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>buf <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b0<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>    bitCount <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">>=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 111111xx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>      result <span class=\"token operator\">+=</span> <span class=\"token function\">_6bitsToa</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>      buf <span class=\"token operator\">=</span> buf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>      bitCount <span class=\"token operator\">-=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>  <span class=\"token comment\">// 最后剩下一点处理一下</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>    result <span class=\"token operator\">+=</span> <span class=\"token function\">_6bitsToa</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span> <span class=\"token operator\">-</span> bitCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>  <span class=\"token comment\">// 填等于号</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span>    result <span class=\"token operator\">+=</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">29</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">30</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">31</span>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">32</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><style>\n        .input-outp-demo > * {\n          box-sizing: border-box;\n          margin-bottom: .8em;\n          white-space: pre-wrap;\n          word-break: break-all;\n        }\n        .input-outp-demo {\n          padding: 1em 2em;\n          box-sizing: border-box;\n          font-family: var(--fontCode);\n        }\n\n        .input-outp-demo input {\n          display: block;\n          padding: .2em .5em;\n          width: 100%;\n        }\n      </style><div class=\"input-outp-demo\"><div>eczn_btoa_v2(\"\\u0000\\u0000@\") ===></div><div>\"AABA\"</div><input placeholder=\"输入 json string (乱码串)\" value=\"&quot;\\u0000\\u0000@&quot;\"/></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><h1 id=\"atob\" class=\"std-title --fontTitle\"><a href=\"#atob\" class=\"markdownIt-Anchor\">#</a> atob 呢?<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">btoa 前面已经写完了，这里补一下反向操作的 atob 实现</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> aTo6bits <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./base64-alphabet'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eczn_atob</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token keyword\">let</span> buf <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token keyword\">let</span> bitCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读到等于号不要了</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>    <span class=\"token keyword\">const</span> bits <span class=\"token operator\">=</span> <span class=\"token function\">aTo6bits</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>    buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>buf <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> bits<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>    bitCount <span class=\"token operator\">+=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">>=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 超了</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>      <span class=\"token keyword\">let</span> byte <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>      result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>byte <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>      buf <span class=\"token operator\">=</span> buf <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>      bitCount <span class=\"token operator\">-=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>  <span class=\"token comment\">// 如果 buf 本身就是 0 的话直接不要了</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bitCount <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> buf <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>    result <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span> bitCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">好了，本文差不多结束了，这里重新贴一下之前的 eczn_atob eczn_btoa demo:</div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><style>\n        .input-outp-demo > * {\n          box-sizing: border-box;\n          margin-bottom: .8em;\n          white-space: pre-wrap;\n          word-break: break-all;\n        }\n        .input-outp-demo {\n          padding: 1em 2em;\n          box-sizing: border-box;\n          font-family: var(--fontCode);\n        }\n\n        .input-outp-demo input {\n          display: block;\n          padding: .2em .5em;\n          width: 100%;\n        }\n      </style><div class=\"input-outp-demo\"><div>eczn_atob(\"AABA\") ===></div><div>\"\\u0000\\u0000@\"</div><input placeholder=\"输入 json string (乱码串)\" value=\"&quot;AABA&quot;\"/></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><style>\n        .input-outp-demo > * {\n          box-sizing: border-box;\n          margin-bottom: .8em;\n          white-space: pre-wrap;\n          word-break: break-all;\n        }\n        .input-outp-demo {\n          padding: 1em 2em;\n          box-sizing: border-box;\n          font-family: var(--fontCode);\n        }\n\n        .input-outp-demo input {\n          display: block;\n          padding: .2em .5em;\n          width: 100%;\n        }\n      </style><div class=\"input-outp-demo\"><div>eczn_btoa_v2(\"\\u0000\\u0000@\") ===></div><div>\"AABA\"</div><input placeholder=\"输入 json string (乱码串)\" value=\"&quot;\\u0000\\u0000@&quot;\"/></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">下面附上原生的 atob 和 btoa 参考对比</div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><style>\n        .input-outp-demo > * {\n          box-sizing: border-box;\n          margin-bottom: .8em;\n          white-space: pre-wrap;\n          word-break: break-all;\n        }\n        .input-outp-demo {\n          padding: 1em 2em;\n          box-sizing: border-box;\n          font-family: var(--fontCode);\n        }\n\n        .input-outp-demo input {\n          display: block;\n          padding: .2em .5em;\n          width: 100%;\n        }\n      </style><div class=\"input-outp-demo\"><div>globalThis.atob(\"AABA\") ===></div><div>\"\\u0000\\u0000@\"</div><input placeholder=\"输入 json string (乱码串)\" value=\"&quot;AABA&quot;\"/></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span></span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><style>\n        .input-outp-demo > * {\n          box-sizing: border-box;\n          margin-bottom: .8em;\n          white-space: pre-wrap;\n          word-break: break-all;\n        }\n        .input-outp-demo {\n          padding: 1em 2em;\n          box-sizing: border-box;\n          font-family: var(--fontCode);\n        }\n\n        .input-outp-demo input {\n          display: block;\n          padding: .2em .5em;\n          width: 100%;\n        }\n      </style><div class=\"input-outp-demo\"><div>globalThis.btoa(\"\\u0000\\u0000@\") ===></div><div>\"AABA\"</div><input placeholder=\"输入 json string (乱码串)\" value=\"&quot;\\u0000\\u0000@&quot;\"/></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div>","props":{"fileBase64Alphabet":"// base64-alphabet.tsx\n\n// 长度为 64, 下标就是其二进制编码 binary\nconst base64Alphabet = (\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + \n  'abcdefghijklmnopqrstuvwxyz' +\n  '0123456789' +\n  '+/'\n);\n\n// base64Alphabet 正查 map\nconst btoaMap = new Map(base64Alphabet.split('').map(\n  (ch, idx) => [idx, ch])\n)\n// base64Alphabet 反查 map\nconst atobMap = new Map(base64Alphabet.split('').map(\n  (ch, idx) => [ch, idx]) // 注意这里跟上面是反过来的\n)\n\n// 6bits 数字转 base64 字母\nexport const _6bitsToa = (_6bit: number) => btoaMap.get(_6bit)!;\n// base64 字母转 6bits 数字\nexport const aTo6bits = (ch: string) => atobMap.get(ch)!;\n","fileEcznBtoaV1":"// eczn_btoa_v1.tsx\n\nimport { _6bitsToa } from './base64-alphabet';\n\n/**\n * 注意到：\n * 3 个字节共 3 * 8 = 24 位\n * 4 个 base64 字母共 4 * 6 = 24 位\n * 因此可以三个字节三个字节的去处理,\n * 三个字节每个位跟 base64 字母的对应关系:\n *\n *    000000000000000000000000  (共 24 位)\n *    !!!!!!\n *          @@@@@@\n *                $$$$$$\n *                      %%%%%%  (每行对应一个字母, 各占6位)\n */\nexport function eczn_btoa_v1(buf: string): string {\n  let result = '';\n  for (let i = 0; i < buf.length; i += 3) {\n    const b0 = buf[i + 0].charCodeAt(0);\n    // 传了 = 或者空了就当成 0 看待\n    const b1 = buf[i + 1]?.charCodeAt(0) ?? 0;\n    const b2 = buf[i + 2]?.charCodeAt(0) ?? 0;\n\n    // 111001 111001 101000 000000\n    // !!!!!! !!==== ====xx xxxxxx\n\n    const _1 = _6bitsToa(\n      // 取出 b0 的高 6 位\n      (b0 & 0b11111100) >> 2\n    );\n    result = result.concat(_1);\n\n    const _2 = _6bitsToa(\n      // 取出 b0 的低 2 位,\n      // 然后再拼接 b1 的高 4 位\n      ((b0 & 0b00000011) << 4) + ((b1 & 0b11110000) >> 4)\n    );\n    result = result.concat(_2);\n\n    // 填 = 等于号处理，然后 break 掉\n    if (buf[i + 1] === undefined) {\n      result = result.concat('=');\n      result = result.concat('=');\n      break;\n    }\n\n    const _3 = _6bitsToa(\n      // 取 b1 的低四位，\n      // 然后再拼接 b2 的高 2 位\n      ((b1 & 0b00001111) << 2) + ((b2 & 0b11000000) >> 6)\n    );\n    result = result.concat(_3);\n\n    // 填 = 等于号处理，然后 break 掉\n    if (buf[i + 2] === undefined) {\n      result = result.concat('=');\n      break;\n    }\n\n    // 取 b2 的低 6 位\n    const _4 = _6bitsToa(b2 & 0b00111111);\n    result = result.concat(_4);\n  }\n\n  return result;\n}\n\n","fileEcznBtoaV2":"// eczn_btoa_v2.tsx\n\nimport { _6bitsToa } from './base64-alphabet';\n\nexport function eczn_btoa_v2(str: string): string {\n  let result = '';\n  let buf = 0;\n  let bitCount = 0;\n\n  for (let i = 0; i < str.length; i ++) {\n    const b0 = str.charCodeAt(i);\n    buf = (buf << 8) + b0;\n    bitCount += 8;\n\n    while (bitCount >= 6) { // 111111xx\n      result += _6bitsToa(buf >> (bitCount - 6));\n      buf = buf & ((0b1 << (bitCount - 6)) - 1)\n      bitCount -= 6;\n    }\n  }\n\n  // 最后剩下一点处理一下\n  if (bitCount !== 0) {\n    result += _6bitsToa(buf << (6 - bitCount));\n  }\n\n  // 填等于号\n  if ((result.length % 4) !== 0) {\n    result += '='.repeat(result.length % 4);\n  }\n\n  return result;\n}\n","fileEcznAtob":"import { aTo6bits } from './base64-alphabet';\n\nexport function eczn_atob(str: string): string {\n  let result = '';\n  let buf = 0;\n  let bitCount = 0;\n\n  for (let i = 0; i < str.length; i ++) {\n    if (str[i] === '=') break; // 读到等于号不要了\n    const bits = aTo6bits(str[i]);\n    buf = (buf << 6) + bits;\n    bitCount += 6;\n\n    while (bitCount >= 8) { // 超了\n      let byte = buf;\n      result += String.fromCharCode(byte >> (bitCount - 8));\n      buf = buf & ((0b1 << (bitCount - 8)) - 1);\n      bitCount -= 8;\n    }\n  }\n\n  // 如果 buf 本身就是 0 的话直接不要了\n  if (bitCount !== 0 && buf !== 0) {\n    result += String.fromCharCode(buf << (8 - bitCount));\n  }\n  return result;\n}\n"},"tocStack":[{"id":"alphabet-query","level":1,"text":"字母表查询"},{"id":"4to3","level":1,"text":"4 个 base64 字母对应 3 字节"},{"id":"syuuuuuchuuuuuu","level":1,"text":"但是, 注意到 ..."},{"id":"atob","level":1,"text":"atob 呢?"}]}}}