{"code":0,"data":{"categoryId":"未分类标题","list":[{"id":"test-tsx-article-for-new-version","title":"新版博客测试文章 (.tsx)","author":"eczn","time":"1999-12-31T16:00:02.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"title":"Markdown 快速上手","date":"2017-02-07 02:21:11","intro":"Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯，写文章经常用的到，它可以被编译成HTML，比起直接用HTML写文章，Markdown书写起来更简洁快速，写作体验会好很多。 ","headPic":"http://2.im.guokr.com/YtavWcYpNiA3PDc9nI3VlKABHBwMwev-sVT_rHUQJAjEAQAA_wAAAEpQ.jpg","type":"article","id":"62ca7f2093a59fcbab91ce9ad5fd9c37","appTitle":"","appIcon":"","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","author":"eczn","imgs":[],"tags":[],"time":"2017-02-06T18:21:11.000Z","isDraft":false,"fileDeps":[],"wordCount":1322},{"id":"three-body-emulator","title":"三体运动模拟器","time":"2021-06-16T10:33:00.000Z","author":"eczn","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"is-esm-robust-enough-in-broswer","title":"浏览器内的 ESM 是否已足够强大","author":"eczn","time":"2022-01-04T15:33:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"white-noise-webgl","title":"从白噪声开始学习 WebGL","author":"eczn","time":"2023-03-28T16:34:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"the-adt-in-ts","title":"TypeScript 里的 ADT","author":"eczn","time":"2023-07-25T13:38:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"hello-css-vars","title":"Hello CSS 变量","author":"eczn","time":"2023-08-12T10:32:11.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"type":"app","id":"css-matrix3d-calc","title":"CSS Matrix3D 中的矩阵运算","appTitle":"CSS Matrix","appIcon":"/tsxs-esm/matrix2x2.831ca9df4adfae73.svg","author":"eczn","time":"2023-08-17T16:00:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"latex-notes","title":"LaTeX 笔记","author":"eczn","time":"2023-10-20T16:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"ipod-spin-gesture","title":"iPod 转盘手势","author":"eczn","time":"2023-11-19T17:20:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"type":"app","id":"app-pinch","title":"Pinch 捏放手势","appTitle":"Pinch 捏放手势","appIcon":"/tsxs-esm/pinch.daef4e8852186e91.svg","author":"eczn","time":"2024-01-01T15:33:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"old-demos","type":"app","appTitle":"早期 DEMO 集","appIcon":"/tsxs-esm/demo-book.dc04159dd4134c99.svg","title":"早期 DEMO 集","author":"eczn","time":"2024-03-16T10:50:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"binary-complement-principle","title":"二进制补码的数学原理","author":"author","time":"2024-04-29T15:58:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"moonbit-start","title":"Moonbit, 启动","author":"eczn","time":"2024-05-01T03:33:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"parser-combinator","title":"Parser Combinator","author":"eczn","time":"2024-05-01T23:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"v8-asm-detail-of-inline-caches","title":"V8 Inline Caches 优化及其汇编细节","author":"eczn","time":"2024-06-29T23:49:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"typescript-52000-checker.ts","title":"TypeScript 52000+ 行的 checker.ts","author":"eczn","time":"2024-09-01T00:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"perlin-noise","title":"柏林噪声的原理和实现","author":"eczn","time":"2024-12-02T04:03:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"review-2024","title":"24 年底的简单记录","author":"ecznlai","tags":[],"time":"2024-12-30T19:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"the-math-editor","title":"公式编辑器 ?","author":"eczn","time":"2025-06-29T02:25:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0}],"current":{"type":"tsx","meta":{"type":"app","id":"css-matrix3d-calc","title":"CSS Matrix3D 中的矩阵运算","appTitle":"CSS Matrix","appIcon":"/tsxs-esm/matrix2x2.831ca9df4adfae73.svg","author":"eczn","time":"2023-08-17T16:00:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./css-matrix3d-calc/index.blog.js","ssrContent":"<style>/* 矩阵容器 */\n.matrix-main {\n  vertical-align: middle;\n  position: relative;\n  display: inline-block;\n  text-align: center;\n  line-height: 1;\n  padding: 0 .4em;\n  box-sizing: border-box;\n}\n\n/* 矩阵括号 */\n.matrix-bracket-left  { left: 0;  border-left: 1px solid #000; }\n.matrix-bracket-right { right: 0; border-right: 1px solid #000; }\n.matrix-bracket {\n  position: absolute;\n  top: 5%;\n  width: 4px;\n  height: 87%;\n  border-top: 1px solid #000;\n  border-bottom: 1px solid #000;\n}\n\n/* 矩阵行 */\n.matrix-line {\n  text-align: center;\n  display: flex;\n  justify-content: space-around;\n}\n\n/* 矩阵项 */\n.matrix-item {\n  display: inline-block;\n  min-width: 1em;\n  width: auto;\n  height: 1em;\n  line-height: 1;\n  padding: .4em;\n  text-align: center;\n  border: none;\n  background: none;\n  outline: none;\n  font-size: 1em;\n  font-family: math, monospace, consolas;\n}\n\n.matrix-calc-progress {\n  white-space: nowrap;\n}\n.matrix-calc-progress > * { margin-right: .4em; }\n\n</style><style>:root {\n  --colorAxisX: rgb(204, 28, 28);\n  --colorAxisY: rgb(19, 145, 29);\n}\n\n.coordinate-axis-main {\n  display: inline-block;\n  position: relative;\n  z-index: -999;\n}\n\n.coordinate-axis-main > * {\n  position: absolute;\n}\n\n.axis-x { background-color: var(--colorAxisX); font-family: serif; }\n.axis-x::before {\n  content: \"x\";\n  display: inline-block;\n  position: absolute;\n  right: 0.5em;\n  top: 0.5em;\n  color: var(--colorAxisX);\n  line-height: 0;\n}\n.axis-x::after {\n  content: \"\";\n  display: inline-block;\n  position: absolute;\n  /* right: -1px; */\n  /* right: 0; */\n  left: 100%;\n  top: 0;\n  width: 0;\n  height: 0;\n  transform: translateY(-50%);\n\tborder-style: solid;\n  border-color: transparent;\n  border-width: 6px 0 6px 6px;\n  border-left-color: var(--colorAxisX);\n}\n\n.axis-y { background-color: var(--colorAxisY); font-family: serif; }\n.axis-y::before {\n  content: \"y\";\n  display: inline-block;\n  position: absolute;\n  top: 0.5em;\n  left: 0.5em;\n  color: var(--colorAxisY);\n  line-height: 0;\n}\n.axis-y::after {\n  content: \"\";\n  display: inline-block;\n  position: absolute;\n  left: -6px;\n  /* top: -1px; */\n  top: -6px;\n  width: 0;\n  height: 0;\n  transform: translateX(.5px);\n  border-bottom: 6px solid var(--colorAxisY);\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n}\n\n\n.coordinate-point {\n  width: 0;\n  height: 0;\n  border: .25em solid #000;\n  border-radius: 1em;\n  transform: translate(-.25em, .25em);\n}\n.coordinate-point-name {\n  font-size: 80%;\n  display: inline-block;\n  line-height: 0;\n  margin-left: .5em;\n  transform: translate(0, -0.5em);\n  white-space: nowrap;\n}\n\n.coordinate-zero {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.coordinate-zero > * { position: absolute; }\n\n</style><style>.formula > * { margin-right: .4em; }\n.formula {\n  position: relative;\n  text-align: center;\n  font-family: math, monospace, consolas;\n  margin: 1em 0;\n}\n\n.formula-nth {\n  display: inline-block;\n  position: absolute;\n  left: 2em;\n  top: 50%;\n  line-height: 0;\n  font-size: 1em;\n  /* opacity: .8; */\n  /* transform: scale(.9); */\n  font-weight: 900;\n}\n\n.formula-symbol {\n  /* margin: 0 .4em; */\n  vertical-align: middle;\n  display: inline-block;\n  font-size: 1em;\n  font-family: math, monospace, consolas;\n  \n}\n\n.formula-character {}\n.formula-product {\n  width: 3px;\n  height: 3px;\n  border-radius: 100%;\n  background-color: #000;\n}\n\n</style><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><span class=\"std-sinking --fontTitle\">C</span>SS 中的 Transform 属性给大多数使用者留下了深刻的印象 —— 几个单词就能实现各种繁复的图形变换, 再配合 transition 属性或者 keyframe 即可又快又好的实现出关键帧动画, 如果再进阶一点学习一下贝塞尔曲线玩一波 timing-function 就可以做出非常生动华丽的动画效果了。</div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre  class=\"prismjs css rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token selector\">#transform-example</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">skewX</span><span class=\"token punctuation\">(</span>-15deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token punctuation\">}</span></pre></div><div class=\"clickable\" style=\"width:2em;height:2em;background:red;transform:skewX(-15deg);margin:1em auto\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">后来进一步学习了解到, transform 底下走的是 css matrix3d, 其入参是一个 4x4 的矩阵, 浏览器会根据这个矩阵来计算并实现图形变换，其中涉及的线性代数原理当时我没有细究, 最近空了又深入研究了一下算是懂了, 故作此雄文将我对 transform 底层的矩阵原理的理解整理成博文，综合发表到这个破站。</div><h1 id=\"matrix\" class=\"std-title --fontTitle\"><a href=\"#matrix\" class=\"markdownIt-Anchor\">#</a> 矩阵的计算<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">矩阵的计算规则是重复而机械化的, 如果人肉去算会很蛋疼, 因此本文不会花太多篇幅去介绍矩阵乘法, 只需要看这个 demo 就行。 (点击启动即可)</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">注意观察其中轮播的行列高亮, 左边各行对应右边各列, 相乘相加计算化简得到最终结果 —— 这也意味着左右交换位置的话会导致不同结果, 矩阵乘法不满足交换律。</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">1</div><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">2</div><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">3</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">4</div><div class=\"matrix-item\">5</div><div class=\"matrix-item\">6</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">7</div><div class=\"matrix-item\">8</div><div class=\"matrix-item\">9</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">10</div><div class=\"matrix-item\">11</div></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">12</div><div class=\"matrix-item\">13</div></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">14</div><div class=\"matrix-item\">15</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">1∙10 ＋ 2∙12 ＋ 3∙14 = 76</div><div class=\"matrix-item\">1∙11 ＋ 2∙13 ＋ 3∙15 = 82</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">4∙10 ＋ 5∙12 ＋ 6∙14 = 184</div><div class=\"matrix-item\">4∙11 ＋ 5∙13 ＋ 6∙15 = 199</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">7∙10 ＋ 8∙12 ＋ 9∙14 = 292</div><div class=\"matrix-item\">7∙11 ＋ 8∙13 ＋ 9∙15 = 316</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div style=\"margin-top:1em\"><div class=\"button-main --fontSansSerif  normal\" style=\"font-size:75%;margin:0 1em\"><span>启动轮播</span></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">我使用的矩阵表示很经典: 二维数组 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">Array&lt;Array&lt;number&gt;&gt;</div> —— 因为本文涉及的矩阵运算主要是加法 / 乘法, 不涉及其他高级操作, 因此可以简单表示, 即:</div><div class=\"std-code\"><pre  class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// 为了写 demo 渲染 jsx 方便, 因此额外加了 string</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>type Matrix <span class=\"token operator\">=</span> Array<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>number <span class=\"token operator\">|</span> string<span class=\"token operator\">>></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token comment\">// 例子: 手动构造一个 3x3 矩阵</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">const</span> oneMatrix<span class=\"token operator\">:</span> Matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token punctuation\">]</span></pre></div><details><summary><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\" style=\"display:inline-block\">矩阵乘法完整实现如下, 已折叠, 点击展开</div></summary><div class=\"std-code\"><pre  class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> Matrix <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">matrixProduct</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  matrix1<span class=\"token operator\">:</span> Matrix<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  matrix2<span class=\"token operator\">:</span> Matrix\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Matrix <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  <span class=\"token keyword\">const</span> rows1 <span class=\"token operator\">=</span> matrix1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token keyword\">const</span> columns1 <span class=\"token operator\">=</span> matrix1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  <span class=\"token keyword\">const</span> rows2 <span class=\"token operator\">=</span> matrix2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>  <span class=\"token keyword\">const</span> columns2 <span class=\"token operator\">=</span> matrix2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>columns1 <span class=\"token operator\">!==</span> rows2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'row col error'</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>  <span class=\"token keyword\">const</span> result<span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows1<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>    result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> columns2<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>      <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> columns1<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>        <span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>        <span class=\"token comment\">// 这段比较乱, 你只需要记住下面这个是核心逻辑</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>        <span class=\"token comment\">// sum += matrix1[i][k] * matrix2[k][j]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span>        <span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span>        <span class=\"token comment\">// 其他的部分是为了实现字符串的 Matrix 加法最后能得到像</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">29</span>        <span class=\"token comment\">// 1*10+2*12+3*14=76 这样的带过程的结果</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">30</span>        <span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">31</span>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">32</span>          <span class=\"token keyword\">typeof</span> matrix1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">33</span>          <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> matrix2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">34</span>        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">35</span>          <span class=\"token comment\">// @ts-ignore matrix 会用于 react 渲染</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">36</span>          <span class=\"token comment\">// 所以这里可能存在 string 计算, 可忽略</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">37</span>          sum <span class=\"token operator\">+=</span> matrix1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> matrix2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">38</span>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">39</span>          <span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matrix1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">∙</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matrix2<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">40</span>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">41</span>            <span class=\"token comment\">// @ts-ignore 用于 react 渲染</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">42</span>            sum <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">43</span>          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">44</span>            <span class=\"token comment\">// @ts-ignore 用于 react 渲染</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">45</span>            sum <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>temp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">46</span>          <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">47</span>        <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">48</span>      <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">49</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">50</span>      result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">51</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">52</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">53</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">54</span>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">55</span><span class=\"token punctuation\">}</span></pre></div></details><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">熟悉了矩阵的乘法计算规则, matrix3d 的矩阵原理就算懂了一半, 我们继续。</div><h1 id=\"matrix-and-coordinate-system-translate\" class=\"std-title --fontTitle\"><a href=\"#matrix-and-coordinate-system-translate\" class=\"markdownIt-Anchor\">#</a> 通过矩阵乘法表达位移变换<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">transform 图形计算就是将图像中的每一个像素点根据某种变换放到新的点上, 比如从原点 (0,0) 位移 (3,4) 其实就是朝着右边移动 3 再向上移动 4 实现。</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">显然, 这个平移可以向量去表达 —— 即每个点都应用到向量 OP(3,4) 上, 而向量可以视作为 2x1 矩阵, 这是否说明可以构造一种特殊的矩阵使得下列计算成立呢 ?</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">?</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x ＋ a</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y ＋ b</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">琢磨了一下, 当对角线全是 1 的情况 (即单位矩阵) 很显然计算结果等于自身:</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1∙x ＋ 0∙y</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ 1∙y</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">这里很有意思，通过 0 消除了 x y 使其不耦合，如果弄成 3x3 的单位矩阵，也就是更进一步:</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">?</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">?</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">?</div><div class=\"matrix-item\">?</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">?</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1∙x ＋ 0∙y ＋ Q</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ 1∙y ＋ W</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">?∙x ＋ ?∙y ＋ 1∙?</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x ＋ Q</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y ＋ W</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">答案呼之欲出，需要想办法让 Q 等于 a, W 等于 b 即可, 并且第三行的 ?∙x 和 ?∙y 中的问号为 0 即可，代入一下计算，就能得到我们想要的那个特殊矩阵了:</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">1</div><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">0</div><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">a</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">b</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">y</div></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\" style=\"background-color:#f6f5b6\">1∙x ＋ 0∙y ＋ a∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ 1∙y ＋ b∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ 0∙y ＋ 1∙1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x ＋ a</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y ＋ b</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div style=\"margin-top:1em\"><div class=\"button-main --fontSansSerif  normal\" style=\"font-size:75%;margin:0 1em\"><span>启动轮播</span></div></div></div><h2 id=\"transform-translate3d\" class=\"std-title --fontTitle\">translate3d(dx, dy, dz) 矩阵的一般形式</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">经过前面的讨论我们很容易就能得到在三维坐标系下, translate3d 平移变换矩阵的一般形式, 其中 dx dy dz 分别是各个坐标轴的位移:</div><div class=\"formula\"><div class=\"formula-symbol formula-character\">translate3d(dx, dy, dz)</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">dx</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">dy</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">dz</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><h2 id=\"transform-scale3d\" class=\"std-title --fontTitle\">scale3d(ma, mb, mc) 矩阵的一般形式</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">即各个轴的放大, 显然易得, 其中 ma mb mc 指的是放大倍数: </div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">ma</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">mb</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">mc</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">y</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">z</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">ma∙x ＋ 0∙y ＋ 0∙z ＋ 0∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ mb∙y ＋ 0∙z ＋ 0∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ 0∙y ＋ mc∙z ＋ 0∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙x ＋ 0∙y ＋ 0∙z ＋ 1∙1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">ma ∙ x</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">mb ∙ y</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">mc ∙ z</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"formula\"><div class=\"formula-symbol formula-character\">scale3d(ma, mb, mc)</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">ma</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">mb</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">mc</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><h1 id=\"how-about-rotating\" class=\"std-title --fontTitle\"><a href=\"#how-about-rotating\" class=\"markdownIt-Anchor\">#</a> 那么旋转呢 ?<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">旋转首先要定一个旋转的中心点, 这里我构造了一个 10x10 的方块, 并将其放在坐标系中心, 并以原点 (0,0) 为中心顺时针旋转 30deg, 旋转叠在一起得到下面左图, 其中 P 经过旋转后移动到了 P&#x27;</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:52.3%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"coordinate-axis-main\" style=\"width:20em;height:18em\"><div class=\"axis-x\" style=\"height:1px;width:100%;left:0;top:10em\"></div><div class=\"axis-y\" style=\"width:1px;height:100%;top:0;left:8em\"></div><div class=\"coordinate-zero\" style=\"transform:translate(8em, -8em)\"><div style=\"width:10em;height:10em;left:-5em;bottom:-5em;background:rgba(245, 0, 0, .3)\"></div><div style=\"width:10em;height:10em;left:-5em;bottom:-5em;background:rgba(245, 0, 0, .3);transform:rotate(30deg)\"></div><div class=\"coordinate-point\" style=\"left:5.00em;bottom:5.00em\"><span class=\"coordinate-point-name\">P (5, 5)</span></div><div class=\"coordinate-point\" style=\"left:6.83em;bottom:1.83em\"><span class=\"coordinate-point-name\">P&#x27; (?, ?)</span></div></div></div></div><div style=\"width:47.6%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"coordinate-axis-main\" style=\"width:20em;height:17em\"><div class=\"axis-x\" style=\"height:1px;width:100%;left:0;top:11em\"></div><div class=\"axis-y\" style=\"width:1px;height:100%;top:0;left:6em\"></div><div class=\"coordinate-zero\" style=\"transform:translate(6em, -6em)\"><div class=\"coordinate-point\" style=\"left:-3.00em;bottom:-1.00em\"><span class=\"coordinate-point-name\">O (x0, y0)</span></div><div class=\"coordinate-point\" style=\"left:2.00em;bottom:4.00em\"><span class=\"coordinate-point-name\">A (xa, ya)</span></div><div class=\"coordinate-point\" style=\"left:3.80em;bottom:0.80em\"><span class=\"coordinate-point-name\">B (xb, yb)</span></div><div style=\"width:100%;height:1px;background:#000;top:100%;left:-50%;transform:translate(0, -2em)\n      rotate(-45deg)\"></div><div style=\"width:100%;height:1px;background:#000;top:100%;left:-50%;transform:translate(0, 0.2058823529411764em)\n      rotate(-14.826479970355665deg)\"></div><div style=\"width:100%;height:1px;background:rgba(0, 0, 0, .3);top:100%;left:-50%;transform:translate(0, 1em)\n      rotate(0deg)\"></div></div></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">这个计算是显而易见的，根据勾股定理计算就能得到 P&#x27; 的坐标约为: (<i>6.83,1.83</i>) <br/>根据此例我们可以构造一个更一般的情况, 即右图所示: A 以 O 为中心顺时针旋转 θ 至 B, 根据已有的信息, 可以得出下面 6 条方程, 其中 r 指的是从 A 到 O 点的距离, 而 sinA sinB 中的 A 和 B 指的是 AO 和 BO 跟 X 轴的角度。</div><div class=\"formula\"><div class=\"formula-nth\">➊</div><div class=\"formula-symbol formula-character\">A = θ ＋ B</div></div><div class=\"formula\"><div class=\"formula-nth\">➋</div><div class=\"formula-symbol formula-character\">ya － y0 = r∙sinA</div></div><div class=\"formula\"><div class=\"formula-nth\">➌</div><div class=\"formula-symbol formula-character\">yb － y0 = r∙sinB</div></div><div class=\"formula\"><div class=\"formula-nth\">➍</div><div class=\"formula-symbol formula-character\">xa － x0 = r∙cosA</div></div><div class=\"formula\"><div class=\"formula-nth\">➎</div><div class=\"formula-symbol formula-character\">xb － x0 = r∙cosB</div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">联立这五个方程配合三角函数完全展开并化简可以得到 xb yb 解析解: </div><div class=\"formula\"><div class=\"formula-nth\">➊</div><div class=\"formula-symbol formula-character\">xb = (1－cosθ)∙x0 ＋ sinθ∙y0 ＋ cosθ∙xa ＋ sinθ∙ya</div></div><div class=\"formula\"><div class=\"formula-nth\">➋</div><div class=\"formula-symbol formula-character\">yb = (cosθ－1)∙y0 ＋ sinθ∙x0 － sinθ∙xa ＋ cosθ∙ya</div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">上述表达比较长, 不妨将其中的常数项剥离为 CX 和 CY, 得到: </div><div class=\"formula\"><div class=\"formula-nth\">➊</div><div class=\"formula-symbol formula-character\">CX = (1－cosθ)∙x0 ＋ sinθ∙y0</div></div><div class=\"formula\"><div class=\"formula-nth\">➋</div><div class=\"formula-symbol formula-character\">xb = cosθ∙xa ＋ sinθ∙ya ＋ CX</div></div><div class=\"formula\"><div class=\"formula-nth\">➌</div><div class=\"formula-symbol formula-character\">CY = (cosθ－1)∙y0 ＋ sinθ∙x0</div></div><div class=\"formula\"><div class=\"formula-nth\">➍</div><div class=\"formula-symbol formula-character\">yb = －sinθ∙xa ＋ cosθ∙ya ＋ CY</div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">根据其中的 ➋ 和 ➍ 的这两个方程即可构造出特征矩阵:</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">cosθ</div><div class=\"matrix-item\">sinθ</div><div class=\"matrix-item\">CX</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">－sinθ</div><div class=\"matrix-item\">cosθ</div><div class=\"matrix-item\">CY</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">xa</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">ya</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">cosθ∙xa ＋ sinθ∙ya ＋ CX∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">－sinθ∙xa ＋ cosθ∙ya ＋ CY∙1</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0∙xa ＋ 0∙ya ＋ 1∙1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">xb</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">yb</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">根据 ➊ ➌ 我们也可以知道，如果旋转的中心恰好在原点的话, 上述 CX 和 CY 的值为 0, 特征矩阵会变的相当简单: </div><div class=\"formula\"><div class=\"formula-symbol formula-character\">M</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">cosθ</div><div class=\"matrix-item\">sinθ</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">－sinθ</div><div class=\"matrix-item\">cosθ</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">可能你会问我你为什么不挑原点做中心 —— 因为 CSS 有 transform-origin 的特性可以自行决定中心点, 因此要考虑一个更 general 的情况。</div><h2 id=\"transform-rotate\" class=\"std-title --fontTitle\">rotateZ(x0, y0, deg) 矩阵的一般形式</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">在上述例子里其实是固定 Z 轴旋转 XY 平面实现的旋转, 在旋转的过程中, z 是不变的, 因此其一般形式如下, 其中 x0 y0 是旋转中心点, deg 为旋转角度:</div><div class=\"formula\"><div class=\"formula-nth\">➊</div><div class=\"formula\"><div class=\"formula-symbol formula-character\">rotateZ(x0, y0, deg)</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">cosθ</div><div class=\"matrix-item\">sinθ</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">CX</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">－sinθ</div><div class=\"matrix-item\">cosθ</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">CY</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"formula\"><div class=\"formula-nth\">➋</div><div class=\"formula-symbol formula-character\">CX = (1－cosθ)∙x0 ＋ sinθ∙y0</div></div><div class=\"formula\"><div class=\"formula-nth\">➌</div><div class=\"formula-symbol formula-character\">CY = (cosθ－1)∙y0 ＋ sinθ∙x0</div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">特别地，当旋转中心在原点 (0, 0) 的时候 CX 和 CY 的值为 0</div><h1 id=\"why-matrix-product-correspond-to-coordinate-transform\" class=\"std-title --fontTitle\"><a href=\"#why-matrix-product-correspond-to-coordinate-transform\" class=\"markdownIt-Anchor\">#</a> 为什么是矩阵乘法 ?<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">矩阵的魔力在于它的乘法操作对应了向量空间的变换 —— 应用到图形学就是图像变换</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">任意复杂的变换都可以拆为若干个子变换, 而每一个变换意味着一次矩阵乘法 —— 那么我们可以通过多次应用矩阵变换的方式来实现对任意复杂的变换或运动的绘制，更具体一点来说每次乘上一次特征矩阵就是做一次变换，比方旋转 45 度后向右走 5px 那就分两个矩阵依次乘上去</div><h1 id=\"let-the-game-begin\" class=\"std-title --fontTitle\"><a href=\"#let-the-game-begin\" class=\"markdownIt-Anchor\">#</a> さあ、ゲームを始めよう<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-window mode-windowed\"><div class=\"std-window-menus\"><div class=\"std-window-title\"><span class=\"std-window-icon\" style=\"background-image:url(/tsxs-esm/matrix2x2.831ca9df4adfae73.svg)\"></span><span>CSS Matrix</span></div><div class=\"std-window-btns\"><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div><div class=\"std-icon std-window-menu-btn\" style=\"overflow:hidden;border-radius:1em;box-sizing:border-box\"></div></div></div><div style=\"height:auto\" class=\"std-window-content\"><div><div style=\"margin:0 auto;text-align:center;overflow:hidden\"><div class=\"coordinate-axis-main\" style=\"width:24em;height:24em\"><div class=\"axis-x\" style=\"height:1px;width:100%;left:0;top:12em\"></div><div class=\"axis-y\" style=\"width:1px;height:100%;top:0;left:12em\"></div><div class=\"coordinate-zero\" style=\"transform:translate(12em, -12em)\"><div style=\"width:16em;height:16em;left:-8em;bottom:-8em;background:rgba(245, 0, 0, .6);transform:perspective(15em) \n    matrix3d(\n      1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1\n    );transition:all .5s;z-index:-9999\"></div><div class=\"coordinate-point\" style=\"left:0;bottom:0;transition:all .5s;z-index:-9999\"><span class=\"coordinate-point-name\">(0.0, 0.0)</span></div></div></div></div><div class=\"std-item-group --fontSansSerif\"><div class=\"std-item-group --fontSansSerif\"><div class=\"std-item\"><div class=\"_item-lr\"><div class=\"_item-l\">Z 轴旋转</div><div class=\"_item-r\"><div class=\"std-progress-outter\">-180<div class=\"std-progress-bar\" style=\"background-color:#E5E5E5;width:16rem\"><div class=\"progress-tips\"></div><div class=\"progress-total\"></div><div class=\"progress-main\" style=\"width:50%;background-color:#333\"><div class=\"progress-current\">0.0</div></div></div>180</div></div></div><div class=\"_item-introduction\">负数代表旋转方向为逆时针</div></div><div class=\"std-item\"><div class=\"_item-lr\"><div class=\"_item-l\">旋转中心 x0</div><div class=\"_item-r\"><div class=\"std-progress-outter\">-200<div class=\"std-progress-bar\" style=\"background-color:#E5E5E5;width:16rem\"><div class=\"progress-tips\"></div><div class=\"progress-total\"></div><div class=\"progress-main\" style=\"width:50%;background-color:#333\"><div class=\"progress-current\">0.0</div></div></div>200</div></div></div><div class=\"_item-introduction\">负数代表向左移动</div></div><div class=\"std-item\"><div class=\"_item-lr\"><div class=\"_item-l\">旋转中心 y0</div><div class=\"_item-r\"><div class=\"std-progress-outter\">-200<div class=\"std-progress-bar\" style=\"background-color:#E5E5E5;width:16rem\"><div class=\"progress-tips\"></div><div class=\"progress-total\"></div><div class=\"progress-main\" style=\"width:50%;background-color:#333\"><div class=\"progress-current\">0.0</div></div></div>200</div></div></div><div class=\"_item-introduction\">负数代表向左移动</div></div></div><div class=\"std-item-group --fontSansSerif\"><div class=\"std-item\"><div class=\"_item-lr\"><div class=\"_item-l\">X 轴位移</div><div class=\"_item-r\"><div class=\"std-progress-outter\">-200<div class=\"std-progress-bar\" style=\"background-color:#E5E5E5;width:16rem\"><div class=\"progress-tips\"></div><div class=\"progress-total\"></div><div class=\"progress-main\" style=\"width:50%;background-color:#333\"><div class=\"progress-current\">0.0</div></div></div>200</div></div></div><div class=\"_item-introduction\">负数代表向左移动</div></div><div class=\"std-item\"><div class=\"_item-lr\"><div class=\"_item-l\">Y 轴位移</div><div class=\"_item-r\"><div class=\"std-progress-outter\">-200<div class=\"std-progress-bar\" style=\"background-color:#E5E5E5;width:16rem\"><div class=\"progress-tips\"></div><div class=\"progress-total\"></div><div class=\"progress-main\" style=\"width:50%;background-color:#333\"><div class=\"progress-current\">0.0</div></div></div>200</div></div></div><div class=\"_item-introduction\">负数代表向上移动</div></div><div class=\"std-item\"><div class=\"_item-lr\"><div class=\"_item-l\">Z 轴位移</div><div class=\"_item-r\"><div class=\"std-progress-outter\">-200<div class=\"std-progress-bar\" style=\"background-color:#E5E5E5;width:16rem\"><div class=\"progress-tips\"></div><div class=\"progress-total\"></div><div class=\"progress-main\" style=\"width:50%;background-color:#333\"><div class=\"progress-current\">0.0</div></div></div>200</div></div></div><div class=\"_item-introduction\">负数代表向上移动</div></div></div><div style=\"text-align:center\" class=\"std-item\"><div class=\"_item-r\"><div class=\"formula\"><div class=\"formula-symbol formula-character\">DemoMatrix</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1.00</div><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">0.00</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">1.00</div><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">0.00</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">1.00</div><div class=\"matrix-item\">0.00</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">0.00</div><div class=\"matrix-item\">1.00</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"formula\"><div class=\"button-main --fontSansSerif  normal\" style=\"font-size:75%\"><span>矩阵复位</span></div><div class=\"button-main --fontSansSerif  normal\" style=\"font-size:75%\"><span>中心复位</span></div></div></div></div></div></div></div></div><div style=\"display:none;height:0px;background:#BBB\">placeholder</div><h1 id=\"motto\" class=\"std-title --fontTitle\"><a href=\"#motto\" class=\"markdownIt-Anchor\">#</a> 意犹未尽 ...<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">玩了上面的 demo 你可能会发现我使用的位移矩阵并不是像下面的 ➊ 这样, 而是 ➋ 这样在最后一行添加分量:</div><div class=\"formula\"><div class=\"formula-nth\">➊</div><div class=\"formula\"><div class=\"formula-symbol formula-character\">translate3d(dx, dy, dz)</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">dx</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">dy</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">dz</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div></div><div class=\"formula\"><div class=\"formula-nth\">➋</div><div class=\"formula\"><div class=\"formula-symbol formula-character\">translate3d(dx, dy, dz)</div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">dx</div><div class=\"matrix-item\">dy</div><div class=\"matrix-item\">dz</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">具体原因是浏览器实现用的矩阵计算中坐标是放在左边而不是在右边, 因此矩阵按对角线对称变换了 (写 DEMO 被坑到了 233):</div><div class=\"std-para --fontArticle matrix-calc-progress\" data-minimap-color=\"#CCCCCC\" style=\"text-align:center\"><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x</div><div class=\"matrix-item\">y</div><div class=\"matrix-item\">z</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-product\"></div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">0</div><div class=\"matrix-item\">0</div><div class=\"matrix-item\">1</div><div class=\"matrix-item\">0</div></div><div class=\"matrix-line\"><div class=\"matrix-item\">dx</div><div class=\"matrix-item\">dy</div><div class=\"matrix-item\">dz</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div><div class=\"formula-symbol formula-character\">=</div><div class=\"matrix-main\"><div class=\"matrix-bracket matrix-bracket-left\"></div><div class=\"matrix-line\"><div class=\"matrix-item\">x＋dx</div><div class=\"matrix-item\">y＋dy</div><div class=\"matrix-item\">z＋dz</div><div class=\"matrix-item\">1</div></div><div class=\"matrix-bracket matrix-bracket-right\"></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">当本文写到这里的时候我依然对这套变换还存有困惑，比如你一定会注意到我每一个的矩阵变换里最后一个是 1, 而且都是 4x4 的，如果说第一二三行对应 x y z 三个轴, 那么第四行又对应什么呢? 而这一切都会指向最后一个线索 「透视 (perspective)」</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">到这里能明显感到我已站在 3D 世界大门前, 只差临门一脚, 意犹未尽 ...</div><div class=\"std-img-dynamic-wrapper --fontArticle\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:74.97%\"><img class=\"std-img-dymanic-main r-link __mosaic __loading\" src=\"/tsxs-esm/matrix-calc.711f6d5fb6fcd933.jpg.mosaic.png\"/><img class=\"std-img-dymanic-main\" src=\"/tsxs-esm/matrix-calc.711f6d5fb6fcd933.jpg\"/></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><s>期间还算了半天算错了, 我太菜了.jpg</s></div><h1 id=\"ref\" class=\"std-title --fontTitle\"><a href=\"#ref\" class=\"markdownIt-Anchor\">#</a> Links<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">撰写此文参考了大量资料, 感谢互联网, 也感谢过程中跟我讨论过的朋友们</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://matrixcalc.org/zh\" target=\"_blank\" style=\"background-color:#eff7dc\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#eff7dc\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/matrixcalc.org?h=4429376162\" style=\"background-image:url(&quot;/get-favicon/matrixcalc.org?h=4429376162&quot;)\"></span><span class=\"std-link-txt\">矩阵计算器 Matrix Calculator</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%99%A3%E4%B9%98%E6%B3%95\" target=\"_blank\" style=\"background-color:#e6dcf0\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#e6dcf0\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/zh.wikipedia.org?h=2528053082\" style=\"background-image:url(&quot;/get-favicon/zh.wikipedia.org?h=2528053082&quot;)\"></span><span class=\"std-link-txt\">Wiki - 矩阵乘法</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform\" target=\"_blank\" style=\"background-color:#eae1df\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#eae1df\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/developer.mozilla.org?h=-3655257734\" style=\"background-image:url(&quot;/get-favicon/developer.mozilla.org?h=-3655257734&quot;)\"></span><span class=\"std-link-txt\">MDN - CSS Transform</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\" target=\"_blank\" style=\"background-color:#f5f1f6\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#f5f1f6\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/developer.mozilla.org?h=-5723211562\" style=\"background-image:url(&quot;/get-favicon/developer.mozilla.org?h=-5723211562&quot;)\"></span><span class=\"std-link-txt\">MDN - Matrix3d</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://zhuanlan.zhihu.com/p/50066691\" target=\"_blank\" style=\"background-color:#f7f0f1\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#f7f0f1\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/zhuanlan.zhihu.com?h=3702827750\" style=\"background-image:url(&quot;/get-favicon/zhuanlan.zhihu.com?h=3702827750&quot;)\"></span><span class=\"std-link-txt\">知乎 - 线性代数之向量空间</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://zhuanlan.zhihu.com/p/81418332\" target=\"_blank\" style=\"background-color:#eae2f4\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#eae2f4\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/zhuanlan.zhihu.com?h=5633750653\" style=\"background-image:url(&quot;/get-favicon/zhuanlan.zhihu.com?h=5633750653&quot;)\"></span><span class=\"std-link-txt\">知乎 - 三角和差公式</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://zhuanlan.zhihu.com/p/392354853\" target=\"_blank\" style=\"background-color:#dce5f6\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#dce5f6\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/zhuanlan.zhihu.com?h=-5957922557\" style=\"background-image:url(&quot;/get-favicon/zhuanlan.zhihu.com?h=-5957922557&quot;)\"></span><span class=\"std-link-txt\">知乎 - 在 WebGL 中实现 matrix3d</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://en.wikipedia.org/wiki/Affine_transformation\" target=\"_blank\" style=\"background-color:#e3eae8\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#e3eae8\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/en.wikipedia.org?h=4956192322\" style=\"background-image:url(&quot;/get-favicon/en.wikipedia.org?h=4956192322&quot;)\"></span><span class=\"std-link-txt\">Wiki - Affine Transformation</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://blog.csdn.net/shenquanyue/article/details/103262512\" target=\"_blank\" style=\"background-color:#f1edf3\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#f1edf3\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/blog.csdn.net?h=2663748792\" style=\"background-image:url(&quot;/get-favicon/blog.csdn.net?h=2663748792&quot;)\"></span><span class=\"std-link-txt\">CSDN - 仿射变换</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://zh.wikipedia.org/zh-cn/%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5\" target=\"_blank\" style=\"background-color:#eee4e3\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#eee4e3\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/zh.wikipedia.org?h=1598049433\" style=\"background-image:url(&quot;/get-favicon/zh.wikipedia.org?h=1598049433&quot;)\"></span><span class=\"std-link-txt\">Wiki - 旋转矩阵</span></a></div>","props":{"fileMatrixProduct":"import type { Matrix } from '.';\n\nexport function matrixProduct(\n  matrix1: Matrix,\n  matrix2: Matrix\n): Matrix {\n  const rows1 = matrix1.length;\n  const columns1 = matrix1[0].length;\n  const rows2 = matrix2.length;\n  const columns2 = matrix2[0].length;\n\n  if (columns1 !== rows2) {\n    throw new Error('row col error')\n  }\n\n  const result: number[][] = [];\n\n  for (let i = 0; i < rows1; i++) {\n    result[i] = [];\n\n    for (let j = 0; j < columns2; j++) {\n      let sum = 0;\n\n      for (let k = 0; k < columns1; k++) {\n        //\n        // 这段比较乱, 你只需要记住下面这个是核心逻辑\n        // sum += matrix1[i][k] * matrix2[k][j]\n        // \n        // 其他的部分是为了实现字符串的 Matrix 加法最后能得到像\n        // 1*10+2*12+3*14=76 这样的带过程的结果\n        // \n        if (\n          typeof matrix1[i][k] === 'number'\n          && typeof matrix2[k][j] === 'number'\n        ) {\n          // @ts-ignore matrix 会用于 react 渲染\n          // 所以这里可能存在 string 计算, 可忽略\n          sum += matrix1[i][k] * matrix2[k][j];\n        } else {\n          const temp = `${matrix1[i][k]}∙${matrix2[k][j]}`;\n          if (sum === 0) {\n            // @ts-ignore 用于 react 渲染\n            sum = temp;\n          } else {\n            // @ts-ignore 用于 react 渲染\n            sum += ` + ${temp}`;\n          }\n        }\n      }\n\n      result[i][j] = sum;\n    }\n  }\n\n  return result;\n}"},"tocStack":[{"id":"matrix","level":1,"text":"矩阵的计算"},{"id":"matrix-and-coordinate-system-translate","level":1,"text":"通过矩阵乘法表达位移变换"},{"id":"transform-translate3d","level":2,"text":"translate3d(dx, dy, dz) 矩阵的一般形式"},{"id":"transform-scale3d","level":2,"text":"scale3d(ma, mb, mc) 矩阵的一般形式"},{"id":"how-about-rotating","level":1,"text":"那么旋转呢 ?"},{"id":"transform-rotate","level":2,"text":"rotateZ(x0, y0, deg) 矩阵的一般形式"},{"id":"why-matrix-product-correspond-to-coordinate-transform","level":1,"text":"为什么是矩阵乘法 ?"},{"id":"let-the-game-begin","level":1,"text":"さあ、ゲームを始めよう"},{"id":"motto","level":1,"text":"意犹未尽 ..."},{"id":"ref","level":1,"text":"Links"}]}}}