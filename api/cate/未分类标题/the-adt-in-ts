{"code":0,"data":{"categoryId":"未分类标题","list":[{"id":"test-tsx-article-for-new-version","title":"新版博客测试文章 (.tsx)","author":"eczn","time":"1999-12-31T16:00:02.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"title":"Markdown 快速上手","date":"2017-02-07 02:21:11","intro":"Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯，写文章经常用的到，它可以被编译成HTML，比起直接用HTML写文章，Markdown书写起来更简洁快速，写作体验会好很多。 ","headPic":"http://2.im.guokr.com/YtavWcYpNiA3PDc9nI3VlKABHBwMwev-sVT_rHUQJAjEAQAA_wAAAEpQ.jpg","type":"article","id":"62ca7f2093a59fcbab91ce9ad5fd9c37","appTitle":"","appIcon":"","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","author":"eczn","imgs":[],"tags":[],"time":"2017-02-06T18:21:11.000Z","isDraft":false,"fileDeps":[],"wordCount":1322},{"id":"three-body-emulator","title":"三体运动模拟器","time":"2021-06-16T10:33:00.000Z","author":"eczn","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"is-esm-robust-enough-in-broswer","title":"浏览器内的 ESM 是否已足够强大","author":"eczn","time":"2022-01-04T15:33:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"white-noise-webgl","title":"从白噪声开始学习 WebGL","author":"eczn","time":"2023-03-28T16:34:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"the-adt-in-ts","title":"TypeScript 里的 ADT","author":"eczn","time":"2023-07-25T13:38:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"hello-css-vars","title":"Hello CSS 变量","author":"eczn","time":"2023-08-12T10:32:11.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"type":"app","id":"css-matrix3d-calc","title":"CSS Matrix3D 中的矩阵运算","appTitle":"CSS Matrix","appIcon":"/tsxs-esm/matrix2x2.831ca9df4adfae73.svg","author":"eczn","time":"2023-08-17T16:00:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"latex-notes","title":"LaTeX 笔记","author":"eczn","time":"2023-10-20T16:00:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"ipod-spin-gesture","title":"iPod 转盘手势","author":"eczn","time":"2023-11-19T17:20:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"type":"app","id":"app-pinch","title":"Pinch 捏放手势","appTitle":"Pinch 捏放手势","appIcon":"/tsxs-esm/pinch.daef4e8852186e91.svg","author":"eczn","time":"2024-01-01T15:33:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},{"id":"old-demos","type":"app","appTitle":"早期 DEMO 集","appIcon":"/tsxs-esm/demo-book.dc04159dd4134c99.svg","title":"早期 DEMO 集","author":"eczn","time":"2024-03-16T10:50:00.000Z","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0}],"current":{"type":"tsx","meta":{"id":"the-adt-in-ts","title":"TypeScript 里的 ADT","author":"eczn","time":"2023-07-25T13:38:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","category":"未分类标题","cateIntro":"该分类暂无介绍 ~","imgs":[],"tags":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./the-adt-in-ts/index.blog.js","ssrContent":"<div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><span class=\"std-sinking --fontTitle\">如</span>果你是一个学编程的那么几乎每一个语言都会跟你提 &quot;代数数据类型&quot; (Algebraic Data Types, ADT). 网上关于 ADT 的讨论也是经久不衰, 本文准备从实际开发中提炼出我对 ADT 的理解以及个人实践。注意本文讨论的是 Algebraic Data Types 代数数据类型, 而不是 Abstract Data Types 抽象数据类型，两者都叫做 ADT 注意区分</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">再注意, typescript 开发请务必开严格模式</div><h1 id=\"what-is-adt\" class=\"std-title --fontTitle\"><a href=\"#what-is-adt\" class=\"markdownIt-Anchor\">#</a> ADT 是什么<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">语言宣称自己支持 ADT 通常是说它的类型系统能提供两种类型:</div><ol class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">1.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">和类型, Sum Types</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">2.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">积类型, Product Types</div></li></ol><h2 id=\"ts-sumTypes\" class=\"std-title --fontTitle\">Sum Types 和类型</h2><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">Sum Types 要求能构造一个新的类型, 比如在 ts 里 enum 是 Sum Types</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">这里声明的 enum T1 T2 的成员并不是真正的 number, 在 ts 里他们被当做新的类型来处理了, 尽管最后是编译成 number</div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// T1 这个类型有一个成员 (取值)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token keyword\">enum</span> <span class=\"token constant\">T1</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// T2 这个类型有两个成员 (取值)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">enum</span> <span class=\"token constant\">T2</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token comment\">// 会报错, 提示不能比较</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">.</span><span class=\"token constant\">A</span> <span class=\"token operator\">===</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></pre></div></div></div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:37.5%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">enum</span> MyBoolean <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  _true<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  _false\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">enum</span> UInt2 <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  _00<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  _01<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  _10<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>  _11\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span><span class=\"token punctuation\">}</span></pre></div></div><div style=\"width:62.5%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">很多司空见惯的类型本质上来说都可以用 Sum Types 去描述的, 左侧 MyBoolean 是 boolean 的一种等价描述，只需要将语言内 if 判断改为判断这个即可认为替代了 “自带的布尔类型”</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">而下面这个 UInt2 则定义了有 4 种取值分别为 00 01 10 11 的 enum, 而且奇妙的是 enum 最后编译为 number 这里的数字刚好和定义是一样的, 因此可以合理认为这个类型可以实现和描述 Uint2 的各种性质 (需要编写各种函数来单独实现)</div></div></div><h2 id=\"ts-proTypes\" class=\"std-title --fontTitle\">Product Types 积类型</h2><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">Product Types 要求能组合存量的类型构造新类型, 在 ts 里 interface 是一个典型的 Product Types</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">借助于 Product Types 能将存量的类型取值范围相乘，即右侧 T3 有四种取值，分别对应 T1 T2 两个成员取值范围之乘积</div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">interface</span> <span class=\"token class-name\">T3</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  k1<span class=\"token operator\">:</span> <span class=\"token constant\">T1</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  k2<span class=\"token operator\">:</span> <span class=\"token constant\">T2</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token comment\">// { k1: T1.A, K2: T2.C }</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token comment\">// { k1: T1.A, K2: T2.D }</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token comment\">// { k1: T1.B, K2: T2.C }</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span><span class=\"token comment\">// { k1: T1.B, K2: T2.D }</span></pre></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">Sum Types 具有 “加法” 性质，能构造新类型，Product Types 具有 “乘法” 性质，一样能构造新类型，这些代数性质使其得名 “代数数据类型 ADT”</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">需要注意, ts 的 enum 并不算完美的和类型, 它有些限制, 比如无法嵌套；同样 interface 也不是完美的积类型, 因为在 ts 里只要长得一样的对象类型都当成是一样的, 这也是网上各种论战的原因, ADT 是好东西, 但是各种语言对其支持程度是不一样的</div><h1 id=\"sumTypes-and-proTypes\" class=\"std-title --fontTitle\"><a href=\"#sumTypes-and-proTypes\" class=\"markdownIt-Anchor\">#</a> 通过 ADT 构建复杂世界的抽象<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">对于 js/ts 开发来说, 很少需要自己构建一种新的类型, 因为自带的 number / boolean 这些已经能覆盖很多场景了, 反过来积类型用的很多, 比如用 interface 去构造对象描述, 其实就是积类型的一种应用, 下面以一个整数溢出的例子来说明 ADT 怎样用来构造复杂抽象</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">需要假设未来 js/ts 提供了 Uint8 类型, 它的取值范围是 [0,255] 的整数, 现在有个问题求解过程需要用到 [-255, 255] 的范围, 那么我们可以通过配合 interface 组合 Uint8 来实现描述 [-255,255] 的类型描述 MyInt:</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:44.4%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyInt</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  sign<span class=\"token operator\">:</span> boolean\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  value<span class=\"token operator\">:</span> UInt8\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">}</span></pre></div></div><div style=\"width:55.5%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">sign 代表正负符号, value 代表 0-255 取值</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">所以 MyInt 取值范围 2 * 256 - 1 = 511 <br/>(两个区间一一对应的话 0 会多算一次, 所以-1)</div></div></div><div class=\"std-img-dynamic-wrapper\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:54.90%\"><div class=\"xhr-progress-printer\" style=\"background:none\"><div>0%</div><div class=\"__smalltext\">XhrUnsent</div></div><img class=\"std-img-dymanic-main\" data-image-src=\"/tsxs-esm/bool_x_uint8.411202a6966f1e0b.png\" style=\"z-index:10\"/><img class=\"std-img-dymanic-main r-link __mosaic \" src=\"/tsxs-esm/bool_x_uint8.411202a6966f1e0b.png.mosaic.png\" style=\"image-rendering:pixelated;z-index:12\"/></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">根据 interface 的积类型性质, MyInt 的取值范围得到了扩大, 使其能满足场景需求，接下来根据场景实现各种不同的方法就能达到抽象目的。</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInt</span> implement MyInt <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token comment\">// 加法</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> MyInt<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MyInt <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token comment\">// 转字符串</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token comment\">// ... 其他实现</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token punctuation\">}</span></pre></div><h1 id=\"ts-sum-proTypes\" class=\"std-title --fontTitle\"><a href=\"#ts-sum-proTypes\" class=\"markdownIt-Anchor\">#</a> TS 里 ADT 实践<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">再举一例，如果需要实现一个左右拖拽 Drag 组件，首先需要定义拖拽 touchStart 的初始位置, 再然后是定义拖拽的位移以及 2d 的位移和拖拽的方向，一个可能的定义是这样的：</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DragState</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token comment\">// 描述当前是否在拖拽中 (比如 touchStart 的时候设置为 true)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  isInDragging<span class=\"token operator\">:</span> boolean\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token comment\">// touchStart 的初始坐标轴位置</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  start<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token comment\">// touchMove 计算两个坐标轴拖拽的位移</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  translation2D<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token comment\">// 拖拽的方向 (string 为 Left Right Down Up 这些)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  direction2D<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">这个定义看上去好像还 OK 能正确描述这些事，实际上它是不靠谱的，比如 isInDragging=true 的时候, start 字段依然可能是可选的, 其他字段也是类似, 这会导致代码里一坨一坨的 if 或者 ? 可选链或者 ! 断言</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">对于类型抽象，它的取值范围应该刚好对应业务的全部可能性，不能有多不能有少，否则不是一一对应的话很难调试和维护。</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:43.4%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">ADT 赋予了我们从零构造新类型的能力，基于这个方向重新设计的类型抽象大概长成右边那个样子</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">按这种思路可以做到一一对应, 进一步完善可以得到下面的完整定义</div></div><div style=\"width:56.5%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span>type DragState <span class=\"token operator\">=</span> <span class=\"token string\">\"不活跃\"</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  type<span class=\"token operator\">:</span> <span class=\"token string\">\"活跃中\"</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token comment\">// 不是可选的 是确定的</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  start<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token operator\">...</span> 其他字段\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token punctuation\">}</span></pre></div></div></div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">// adt-drag-define.tsx</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// 左右拖拽组件定义左和右</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  Center<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  Left<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  Right<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  Up<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  Down<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token comment\">// 记录拖拽的 2d 方向</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span><span class=\"token comment\">// 比如如果拖动到左上角则记录为 [.Left, .Up] 代表左上</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span><span class=\"token keyword\">export</span> type Direction2D <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Direction<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span><span class=\"token comment\">// 描述 2d 坐标位移, 可以通过这个位移得到 Direction2D</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span><span class=\"token keyword\">export</span> type Translation2D <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span><span class=\"token comment\">// 拖拽组件: 不活跃</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span><span class=\"token keyword\">export</span> type Inactive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>  <span class=\"token comment\">// 标记为不活跃状态</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>  type<span class=\"token operator\">:</span> <span class=\"token string\">'inactive'</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span><span class=\"token comment\">// 拖拽组件: 拖拽中</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span><span class=\"token keyword\">export</span> type Dragging <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>  <span class=\"token comment\">// 标记为拖拽中状态</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span>  type<span class=\"token operator\">:</span> <span class=\"token string\">'dragging'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span>  <span class=\"token comment\">// 记录 onTouchStart 的瞬间坐标</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">29</span>  start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">30</span>  <span class=\"token comment\">// 记录 x y 坐标轴的位移</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">31</span>  translation<span class=\"token operator\">:</span> Translation2D<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">32</span>  <span class=\"token comment\">// 记录 x y 坐标轴的方向</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">33</span>  direction<span class=\"token operator\">:</span> Direction2D<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">34</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">35</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">36</span><span class=\"token comment\">// 组合状态来描述拖拽组件的全部状态取值</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">37</span><span class=\"token keyword\">export</span> type DragState <span class=\"token operator\">=</span> Inactive <span class=\"token operator\">|</span> Dragging</pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">可以看到，上面这个类型定义的风格很像 React Redux Action 的类型，这种类型学术上称呼为 tagged-union-types, 简单理解就是带名字的 union-types, 系通过唯一 type 字面量来保证是一个新的类型, 是一种对结构化类型的妥协</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">通过这种方式可以利用 union-types 实现 Sum Types 构造新类型的特性，关键在于引入一个字面量 type 使得 interface 变得唯一</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">下面是基于上面的定义实现的拖拽 demo, 可以玩下 (移动端拖拽体验可能差一点, demo 性质懒得弄 passive event 之类的)</div><div style=\"position:relative;height:300px;width:100%;background:#EEE;cursor:pointer;user-select:none\"><div>上一次拖拽结果: </div><div style=\"position:absolute;text-align:center;background:#FEE;left:50%;top:50%;display:inline-block;white-space:nowrap;transform:translate(\n            calc(-50% + 0px),\n            calc(-50% + 0px)\n          )\"><div>(0, 0)</div><div>(Center, Center)</div></div></div><details><summary><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\" style=\"display:inline-block\">完整实现如下，已折叠，点击展开</div></summary><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">000</span><span class=\"token comment\">// what-is-adt-so-called-in-pl/adt-drag.tex</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">001</span><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">002</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">003</span><span class=\"token comment\">// 前文中的各种定义</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">004</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">005</span>  DragState<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">006</span>  Direction2D<span class=\"token punctuation\">,</span> Translation2D<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">007</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./adt-drag-define'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">008</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">009</span><span class=\"token comment\">// 移动端解决滚动穿透的问题, 请忽略 (iOS 似乎无效 233)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">010</span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">011</span>  disableTouchScroll<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">012</span>  enableTouchScroll<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">013</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../hooks/disable-touch-scroll'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">014</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">015</span><span class=\"token comment\">// 方便同时处理 touch 和 mouse 事件, 这两个长得基本一样</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">016</span>type DragEvent <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>Touch <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token punctuation\">,</span> MouseEvent<span class=\"token operator\">></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">017</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">018</span><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ADTDrag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">019</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>dragState<span class=\"token punctuation\">,</span> setDragState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>useState<span class=\"token operator\">&lt;</span>DragState<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'inactive'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">020</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> dx<span class=\"token punctuation\">,</span> dy <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getTranslation2D</span><span class=\"token punctuation\">(</span>dragState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">021</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> directionX<span class=\"token punctuation\">,</span> directionY <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">getDirection2D</span><span class=\"token punctuation\">(</span>dragState<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">022</span>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>lastDragResult<span class=\"token punctuation\">,</span> setLastDragReuslt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">023</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">024</span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onStart</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> DragEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">025</span>    <span class=\"token function\">setDragState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">026</span>      type<span class=\"token operator\">:</span> <span class=\"token string\">'dragging'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">027</span>      start<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageX<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>pageY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">028</span>      translation<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">029</span>      direction<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Direction<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">030</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">031</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">032</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">033</span>  <span class=\"token comment\">// 根据 start 计算位移和 Direction</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">034</span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> DragEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">035</span>    <span class=\"token function\">setDragState</span><span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">036</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'inactive'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> prevState<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">037</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">038</span>      <span class=\"token comment\">// 末减初 得到两个坐标轴的位移</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">039</span>      <span class=\"token keyword\">const</span> translation<span class=\"token operator\">:</span> Translation2D <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">040</span>        e<span class=\"token punctuation\">.</span>pageX <span class=\"token operator\">-</span> prevState<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">041</span>        e<span class=\"token punctuation\">.</span>pageY <span class=\"token operator\">-</span> prevState<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">042</span>      <span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">043</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">044</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">045</span>        <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">046</span>        translation<span class=\"token operator\">:</span> translation<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">047</span>        direction<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">048</span>          <span class=\"token comment\">// 根据两个轴位移得到 direction</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">049</span>          translation<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Direction<span class=\"token punctuation\">.</span>Right <span class=\"token operator\">:</span> Direction<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">050</span>          translation<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> Direction<span class=\"token punctuation\">.</span>Down <span class=\"token operator\">:</span> Direction<span class=\"token punctuation\">.</span>Up<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">051</span>        <span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">052</span>      <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">053</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">054</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">055</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">056</span>  <span class=\"token comment\">// 设置为不活跃</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">057</span>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onEnd</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">?</span><span class=\"token operator\">:</span> DragEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">058</span>    <span class=\"token function\">setDragState</span><span class=\"token punctuation\">(</span>prev <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">059</span>      <span class=\"token comment\">// 只有在 dragging 的时候才记录</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">060</span>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'dragging'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">061</span>        <span class=\"token function\">setLastDragReuslt</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dx<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dy<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">062</span>      <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">063</span>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'inactive'</span> <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">064</span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">065</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">066</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">067</span>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">068</span>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">069</span>      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">070</span>        position<span class=\"token operator\">:</span> <span class=\"token string\">'relative'</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token string\">'300px'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">071</span>        width<span class=\"token operator\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> background<span class=\"token operator\">:</span> <span class=\"token string\">'#EEE'</span><span class=\"token punctuation\">,</span> \n<span class=\"line-numbers-rows\" style=\"user-select: none;\">072</span>        cursor<span class=\"token operator\">:</span> <span class=\"token string\">'pointer'</span><span class=\"token punctuation\">,</span> userSelect<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">073</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">074</span>      <span class=\"token attr-name\">onMouseDown</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">075</span>      <span class=\"token attr-name\">onMouseMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token function\">onMove</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">076</span>      <span class=\"token attr-name\">onMouseUp</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token function\">onEnd</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">077</span>      <span class=\"token comment\">// 兼容 move 到浏览器外部的情况</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">078</span>      <span class=\"token attr-name\">onMouseLeave</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token function\">onEnd</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">079</span>      <span class=\"token attr-name\">onTouchStart</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">080</span>        <span class=\"token function\">disableTouchScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 禁用滚动, 解决滚动穿透</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">081</span>        <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">082</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">083</span>      <span class=\"token attr-name\">onTouchMove</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">084</span>        <span class=\"token function\">disableTouchScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 禁用滚动, 解决滚动穿透</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">085</span>        <span class=\"token function\">onMove</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">086</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">087</span>      <span class=\"token comment\">// 移动端实际没有 e</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">088</span>      <span class=\"token attr-name\">onTouchEnd</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">089</span>        <span class=\"token function\">enableTouchScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 恢复滚动</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">090</span>        <span class=\"token function\">onEnd</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">?.</span>touches<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">091</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">092</span>    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">093</span>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">上一次拖拽结果: </span><span class=\"token punctuation\">{</span>lastDragResult<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">094</span>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">095</span>        position<span class=\"token operator\">:</span> <span class=\"token string\">'absolute'</span><span class=\"token punctuation\">,</span> textAlign<span class=\"token operator\">:</span> <span class=\"token string\">'center'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">096</span>        background<span class=\"token operator\">:</span> <span class=\"token string\">'#FEE'</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">097</span>        top<span class=\"token operator\">:</span> <span class=\"token string\">'50%'</span><span class=\"token punctuation\">,</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'inline-block'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">098</span>        whiteSpace<span class=\"token operator\">:</span> <span class=\"token string\">'nowrap'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">099</span>        <span class=\"token comment\">// 根据 dragState 拿到的 dx dy 设置位移</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">100</span>        transform<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">101</span>          translate(\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">102</span>            calc(-50% + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dx<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px),\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">103</span>            calc(-50% + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dy<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">104</span>          )\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">105</span>        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">106</span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">107</span>        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 位移输出 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">108</span>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(</span><span class=\"token punctuation\">{</span>dx<span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>dy<span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">109</span>        </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* 方向指示 */</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">110</span>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(</span><span class=\"token punctuation\">{</span>Direction<span class=\"token punctuation\">[</span>directionX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">, </span><span class=\"token punctuation\">{</span>Direction<span class=\"token punctuation\">[</span>directionY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">)</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">111</span>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">112</span>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">113</span>  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">114</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">115</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">116</span><span class=\"token comment\">/** 获取 state 当前的位移 */</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">117</span><span class=\"token keyword\">function</span> <span class=\"token function\">getTranslation2D</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> DragState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Translation2D <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">118</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'inactive'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">119</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">120</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">121</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'dragging'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">122</span>    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>translation\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">123</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">124</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">125</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">126</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">127</span><span class=\"token comment\">/** 获取 state 当前的方向 */</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">128</span><span class=\"token keyword\">function</span> <span class=\"token function\">getDirection2D</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> DragState<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Direction2D <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">129</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'inactive'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">130</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Direction<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">131</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">132</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'dragging'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">133</span>    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>direction\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">134</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">135</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Direction<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span> Direction<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">136</span><span class=\"token punctuation\">}</span></pre></div></details><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">看到这里你会喷我, md eczn 这套定义代码量变多了不少，但是实际上这个 DragState 只有两种取值，不活跃和活跃，对应着两个确定的没有带问号的取值</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">但是对于一开始那个不完备的带好多个问号的 interface, 由于问号较多其取值可能性是 2\\*2\\*2\\*2 十六种, 而真实的业务状态也只有两种, 于是如果你使用那个不完备的定义来写组件的话那么你写代码得处处提防逻辑落入到无效状态中，具体你可以看我这个实现里其实没有各种 if 兜底, 光看代码就能预测软件运行结果了</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">实际上，主要是 ts 的 ADT tagged-union-types 没有糖, 看看相同的的定义下 swift 的声明和处理是怎样的吧</div><div class=\"std-code\"><pre class=\"prismjs swift rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">DragState</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token comment\">// 不活跃 </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token keyword\">case</span> inactive\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token comment\">// 活跃中, 关联两个值 start 和 translation</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token comment\">// CGPoint, CGSize 是内置的坐标类型 可以用来描述点和位移</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token keyword\">case</span> <span class=\"token function\">dragging</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGPoint</span><span class=\"token punctuation\">,</span> translation<span class=\"token punctuation\">:</span> <span class=\"token class-name\">CGSize</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">printState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DragState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>  <span class=\"token keyword\">switch</span> state <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>    <span class=\"token comment\">// 因为 state 类型是确定的所以这里可以缩写 .inative</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>inative<span class=\"token punctuation\">:</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"不活跃\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>    <span class=\"token comment\">// 匹配到拖拽中, 并将关联的两个值存储到变量中 </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">dragging</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> myStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">let</span> myTranslation<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"拖拽中\"</span></span><span class=\"token punctuation\">,</span> myStart<span class=\"token punctuation\">,</span> myTranslation<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span><span class=\"token punctuation\">}</span></pre></div><h1 id=\"importantce-of-adt\" class=\"std-title --fontTitle\"><a href=\"#importantce-of-adt\" class=\"markdownIt-Anchor\">#</a> ADT 的重要性<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">世界上大多数语言都宣称自己支持 ADT, 但从实践来看不同语言里对 ADT 的支持程度并不一样, 这最终会决定写代码的抽象程度和正确性, ADT 支持好的语言最后的代码抽象高, 维护更方便。</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">反过来则可能需要不断跟底层存储打交道, 比如 C 语言中的 ADT 支持就不算非常完善, 导致很多时候要掺合类型的底层存储，除此之外，语言里各种特性都穿插着 ADT 的思想光辉，下面以几个特性举例</div><h2 id=\"ts-null-safty\" class=\"std-title --fontTitle\">空值和空安全</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">空安全是典型的和类型设计，在 ts 里可选的值实际上等价于下面这个泛型描述</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span>type Maybe<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">|</span> <span class=\"token constant\">T</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">然后再配合 ? 可选链语法糖来处理形如 Maybe&lt;T&gt; 的类型从而使得大部分可选场景变得简洁易懂</div><h2 id=\"ts-object\" class=\"std-title --fontTitle\">对象</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">典型的积类型设计, 增加字段来提升对象的取值范围来实现对现实世界的复杂抽象</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  name<span class=\"token operator\">:</span> string\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  age<span class=\"token operator\">:</span> number\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">}</span></pre></div><h2 id=\"ts-enum\" class=\"std-title --fontTitle\">enum</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">和类型设计，能定义出新的类型及其成员</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">enum</span> AppColor <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  Primary<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  Black<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  Error<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token punctuation\">}</span></pre></div><h2 id=\"union-types\" class=\"std-title --fontTitle\">Union Types</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">和类型设计，能定义出新的类型及其成员, 但是需要注意 ts 由于对象化类型的原因，这个设计不能算严格的新类型，除非你使用 tagged union types 那样加一个唯一 type 字面量标记</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span>type Colors <span class=\"token operator\">=</span> <span class=\"token string\">\"RED\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"GREEN\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"BLUE\"</span></pre></div><h2 id=\"go-return\" class=\"std-title --fontTitle\">为什么要喷 Go</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">我们都知道 go 没有提供 try-catch 其错误处理是通过多值返回的形式搞的, 比如下面这个除法的例子</div><div class=\"std-code\"><pre class=\"prismjs go rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">func</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a <span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> b <span class=\"token builtin\">float64</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token keyword\">if</span> b <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"除 0 错误\"</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  result<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>  <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result:\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span><span class=\"token punctuation\">}</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">由于这个经典特性，导致报错的地方要各种判断 err 是不是为空值, 于是有了下面这张经典老梗</div><div class=\"std-img-dynamic-wrapper\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:62.03%\"><div class=\"xhr-progress-printer\" style=\"background:none\"><div>0%</div><div class=\"__smalltext\">XhrUnsent</div></div><img class=\"std-img-dymanic-main\" data-image-src=\"/tsxs-esm/go-return-err.2b3a35750f3cafc2.jpg\" style=\"z-index:10\"/><img class=\"std-img-dymanic-main r-link __mosaic \" src=\"/tsxs-esm/go-return-err.2b3a35750f3cafc2.jpg.mosaic.png\" style=\"image-rendering:pixelated;z-index:12\"/></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">除了 try-catch 的问题，最该喷的应该是 go 的这个多值返回是一个积类型，也就是说返回的 (T, Err) 这个多值有四种可能性分别是</div><ol class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">1.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">正常返回: (T, nil) </div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">2.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">异常返回: (nil, Err)</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">3.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">未知返回: (nil, nil)</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">4.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">未知返回: (T, Err)</div></li></ol><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">我们实际期望返回的是积类型的两种, 也就是 &quot;null | T&quot;, 写过 ts 的你应该懂这段代码的 result 多恶心人吧:</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">function</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> Error<span class=\"token operator\">?</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"除 0 错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token comment\">// result 类型是 [number?, Error?] 有四种取值可能性 ...</span></pre></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">除法的例子虽然不太可能写出上面 3 和 4 的两种情况，但是软件是复杂的，我们不应该写出业务不可能出现的类型，一旦写出来软件运行就有可能落入未定义的错误状态导致各种恶心人的兜底判断了，这就是为什么要爆喷 go 的原因了</div><h2 id=\"ts-null-undefined\" class=\"std-title --fontTitle\">null undefined</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">js/ts 类似 go 那样值得爆喷的 ADT 设计错误就是 null undefined 两个空值的问题，它会导致类型出现更大的取值范围，导致有时候你甚至要严格区分 undefined 和 null 。。。写过前端的你应该懂的吧, 下面 Obj 实际上相当复杂:</div><div class=\"std-code\"><pre class=\"prismjs tsx rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Obj</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  value<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token comment\">// 1. { value: undefined }</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token comment\">// 2. { value: null }</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token comment\">// 3. { value: 3.1415926 }</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token comment\">// 4. { value: 其他值 } 可能不是数字 ts 无法保证, 有的人喜欢 any</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token comment\">// 有可能 1 和 2 两个对应的状态含义不是一样的... 于是:</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> undeinfed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></pre></div><h1 id=\"pl-adt-supports\" class=\"std-title --fontTitle\"><a href=\"#pl-adt-supports\" class=\"markdownIt-Anchor\">#</a> 评估语言的 ADT<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">能坚持看到这里说明你大概也明白了 ADT 是什么以及重要性了吧，那么如何评估语言对 ADT 支持程度呢? 可以参考不同语言里对二叉树的实现，它又有字段又有递归，还有空树的情况，这种结构非常适合作为评估 ADT 抽象能力的手段，当然也可以看大家如何爆喷各种语言来评估。</div><h2 id=\"haskell-adt\" class=\"std-title --fontTitle\">Haskell</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">完美：体现出空树、子树、泛型等特征，赞美 Haskell</div><div class=\"std-code\"><pre class=\"prismjs haskell rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">data</span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>    <span class=\"token constant\">Empty</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token operator\">|</span> <span class=\"token constant\">Node</span> <span class=\"token hvariable\">a</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span></pre></div><h2 id=\"swift-adt\" class=\"std-title --fontTitle\">Swift</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">很好：形式上跟 Haskell 像, 体现出空树、子树、泛型等特征, 但是递归的时候要单独给一个 indirect 声明就有点小残念</div><div class=\"std-code\"><pre class=\"prismjs swift rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Tree</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token keyword\">case</span> empty\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token keyword\">indirect</span> <span class=\"token keyword\">case</span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Tree</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token punctuation\">}</span></pre></div><h2 id=\"kotlin-adt\" class=\"std-title --fontTitle\">Kotlin</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">较好：体现出空树、子树、泛型等特征, 不过值得吐槽的是 kotlin 类型这块感觉不如 Swift</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">从二叉树这个例子可以看出, 这是 class 声明, 并不是一种抽象的逻辑结构</div><div class=\"std-code\"><pre class=\"prismjs kotlin rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> Tree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> Node<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>    <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>    <span class=\"token keyword\">val</span> left<span class=\"token operator\">:</span> Tree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>    <span class=\"token keyword\">val</span> right<span class=\"token operator\">:</span> Tree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">?</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Tree<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token punctuation\">}</span></pre></div><h2 id=\"ts-adt\" class=\"std-title --fontTitle\">TypeScript</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">较好：体现出空树、子树、泛型等特征, 看着虽然好实际上长得像这个的就是二叉树, 这是结构化类型的痛, 不得不品尝, 如果加个 type:&quot;XXX_TREE&quot; 的字段描述就够 sum 了不过有点蠢, 另外也有类似 kotlin 的问题，需要一个类或对象来承载树结构，而不是像 swift haskell 那样是一个逻辑结构</div><div class=\"std-code\"><pre class=\"prismjs ts rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">type</span> <span class=\"token class-name\">Tree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>  <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> Tree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> Tree<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span></pre></div><h2 id=\"golang-adt\" class=\"std-title --fontTitle\">Go</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">一般 没有空树, 泛型, 使用上大概率很蛋疼的 (新版 go 终于有泛型了)</div><div class=\"std-code\"><pre class=\"prismjs go rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">type</span> Tree <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>    Value <span class=\"token builtin\">int</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>    Left  <span class=\"token operator\">*</span>Tree\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>    Right <span class=\"token operator\">*</span>Tree\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token punctuation\">}</span></pre></div><h2 id=\"java-adt\" class=\"std-title --fontTitle\">Java</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">一般：没有空树, 泛型, 而且似乎没有办法单独声明类型，必须得跟 class 走</div><div class=\"std-code\"><pre class=\"prismjs java rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>    <span class=\"token class-name\">T</span> val<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span>    <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>    <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>    <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span><span class=\"token punctuation\">}</span></pre></div><h2 id=\"brainfuck-adt\" class=\"std-title --fontTitle\">Brainfuck</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">糟糕: GPT 才能掌握的语言</div><div class=\"std-code\"><pre class=\"prismjs brainfuck rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span>+++++<span class=\"token punctuation\">[</span><span class=\"token operator\">></span>++++<span class=\"token punctuation\">[</span><span class=\"token operator\">></span>++++<span class=\"token operator\">&lt;</span>-<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>-<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 声明根节点的值为5</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token operator\">></span>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++. <span class=\"token comment\"># 在根节点的右节点上存储9</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token operator\">&lt;</span>+++++<span class=\"token punctuation\">[</span>-<span class=\"token operator\">&lt;</span>++++++<span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>. <span class=\"token comment\"># 在根节点的左节点上存储7</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token operator\">>></span>+++++++++++++++++++++++++++++++++++++++++. <span class=\"token comment\"># 在右节点的左节点上存储17</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token operator\">&lt;&lt;</span>+++++++++++. <span class=\"token comment\"># 在左节点的左节点上存储13</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span><span class=\"token operator\">>></span>+. <span class=\"token comment\"># 在右节点的右节点上存储18</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span><span class=\"token comment\"># 上述这段代码描述了这颗树</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>      <span class=\"token number\">5</span> \n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>    /   <span class=\"token punctuation\">\\</span> \n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>   <span class=\"token number\">13</span>    <span class=\"token number\">9</span> \n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>        / <span class=\"token punctuation\">\\</span> \n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>       <span class=\"token number\">17</span>  <span class=\"token number\">18</span></pre></div><h1 id=\"links\" class=\"std-title --fontTitle\"><a href=\"#links\" class=\"markdownIt-Anchor\">#</a> 参考<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://en.wikipedia.org/wiki/Algebraic_data_type\" target=\"_blank\" style=\"background-color:#ece8df\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#ece8df\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/en.wikipedia.org?h=4699482507\" style=\"background-image:url(&quot;/get-favicon/en.wikipedia.org?h=4699482507&quot;)\"></span><span class=\"std-link-txt\">Wiki: Algebraic data type, ADT</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://javascript.plainenglish.io/tagged-union-types-in-typescript-leveraging-type-safety-and-flexibility-be0e60145815\" target=\"_blank\" style=\"background-color:#e0dfe7\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#e0dfe7\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/javascript.plainenglish.io?h=3915389481\" style=\"background-image:url(&quot;/get-favicon/javascript.plainenglish.io?h=3915389481&quot;)\"></span><span class=\"std-link-txt\">Tagged Union Types in TypeScript</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"https://swiftgg.gitbook.io/swift/\" target=\"_blank\" style=\"background-color:#e0def6\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#e0def6\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/swiftgg.gitbook.io?h=-2116087256\" style=\"background-image:url(&quot;/get-favicon/swiftgg.gitbook.io?h=-2116087256&quot;)\"></span><span class=\"std-link-txt\">SwiftGG: 中文版 Apple 官方 Swift 教程</span></a></div>","props":{"fileAdtDrag":"// what-is-adt-so-called-in-pl/adt-drag.tex\nimport React from 'react';\n\n// 前文中的各种定义\nimport {\n  DragState, Direction,\n  Direction2D, Translation2D,\n} from './adt-drag-define';\n\n// 移动端解决滚动穿透的问题, 请忽略 (iOS 似乎无效 233)\nimport {\n  disableTouchScroll,\n  enableTouchScroll,\n} from '../hooks/disable-touch-scroll';\n\n// 方便同时处理 touch 和 mouse 事件, 这两个长得基本一样\ntype DragEvent = React.Touch | React.MouseEvent<HTMLDivElement, MouseEvent>\n\nexport function ADTDrag() {\n  const [dragState, setDragState] = React.useState<DragState>({ type: 'inactive' })\n  const [ dx, dy ] = getTranslation2D(dragState);\n  const [ directionX, directionY ] = getDirection2D(dragState)\n  const [lastDragResult, setLastDragReuslt] = React.useState('')\n\n  const onStart = (e: DragEvent) => {\n    setDragState({\n      type: 'dragging',\n      start: { x: e.pageX, y: e.pageY },\n      translation: [0, 0],\n      direction: [Direction.Center, Direction.Center],\n    });\n  }\n\n  // 根据 start 计算位移和 Direction\n  const onMove = (e: DragEvent) => {\n    setDragState(prevState => {\n      if (prevState.type === 'inactive') return prevState;\n\n      // 末减初 得到两个坐标轴的位移\n      const translation: Translation2D = [\n        e.pageX - prevState.start.x,\n        e.pageY - prevState.start.y,\n      ]\n\n      return {\n        ...prevState,\n        translation: translation,\n        direction: [\n          // 根据两个轴位移得到 direction\n          translation[0] > 0 ? Direction.Right : Direction.Left,\n          translation[1] > 0 ? Direction.Down : Direction.Up,\n        ]\n      }\n    });\n  }\n\n  // 设置为不活跃\n  const onEnd = (e?: DragEvent) => {\n    setDragState(prev => {\n      // 只有在 dragging 的时候才记录\n      if (prev.type === 'dragging') {\n        setLastDragReuslt(`${dx}, ${dy}`)\n      }\n      return { type: 'inactive' }\n    })\n  }\n\n  return <>\n    <div\n      style={{\n        position: 'relative', height: '300px',\n        width: '100%', background: '#EEE', \n        cursor: 'pointer', userSelect: 'none',\n      }}\n      onMouseDown={(e) => onStart(e)}\n      onMouseMove={e => onMove(e)}\n      onMouseUp={e => onEnd(e)}\n      // 兼容 move 到浏览器外部的情况\n      onMouseLeave={e => onEnd(e)}\n      onTouchStart={e => {\n        disableTouchScroll() // 禁用滚动, 解决滚动穿透\n        onStart(e.touches[0])\n      }}\n      onTouchMove={e => {\n        disableTouchScroll() // 禁用滚动, 解决滚动穿透\n        onMove(e.touches[0])\n      }}\n      // 移动端实际没有 e\n      onTouchEnd={e => {\n        enableTouchScroll() // 恢复滚动\n        onEnd(e?.touches?.[0])\n      }}\n    >\n      <div>上一次拖拽结果: {lastDragResult}</div>\n      <div style={{\n        position: 'absolute', textAlign: 'center',\n        background: '#FEE', left: '50%',\n        top: '50%', display: 'inline-block',\n        whiteSpace: 'nowrap',\n        // 根据 dragState 拿到的 dx dy 设置位移\n        transform: `\n          translate(\n            calc(-50% + ${dx}px),\n            calc(-50% + ${dy}px)\n          )\n        `,\n      }}>\n        {/* 位移输出 */}\n        <div>({dx}, {dy})</div>\n        {/* 方向指示 */}\n        <div>({Direction[directionX]}, {Direction[directionY]})</div>\n      </div>\n    </div>\n  </>\n}\n\n/** 获取 state 当前的位移 */\nfunction getTranslation2D(state: DragState): Translation2D {\n  if (state.type === 'inactive') {\n    return [0, 0]\n  }\n  if (state.type === 'dragging') {\n    return state.translation\n  }\n  return [0, 0]\n}\n\n/** 获取 state 当前的方向 */\nfunction getDirection2D(state: DragState): Direction2D {\n  if (state.type === 'inactive') {\n    return [Direction.Center, Direction.Center]\n  }\n  if (state.type === 'dragging') {\n    return state.direction\n  }\n  return [Direction.Center, Direction.Center]\n}\n","fileAdtDragDefine":"// adt-drag-define.tsx\n\n// 左右拖拽组件定义左和右\nexport enum Direction {\n  Center,\n  Left,\n  Right,\n  Up,\n  Down,\n}\n\n// 记录拖拽的 2d 方向\n// 比如如果拖动到左上角则记录为 [.Left, .Up] 代表左上\nexport type Direction2D = [Direction, Direction]\n\n// 描述 2d 坐标位移, 可以通过这个位移得到 Direction2D\nexport type Translation2D = [number, number];\n\n// 拖拽组件: 不活跃\nexport type Inactive = {\n  // 标记为不活跃状态\n  type: 'inactive'\n}\n\n// 拖拽组件: 拖拽中\nexport type Dragging = {\n  // 标记为拖拽中状态\n  type: 'dragging',\n  // 记录 onTouchStart 的瞬间坐标\n  start: { x: number, y: number },\n  // 记录 x y 坐标轴的位移\n  translation: Translation2D,\n  // 记录 x y 坐标轴的方向\n  direction: Direction2D,\n}\n\n// 组合状态来描述拖拽组件的全部状态取值\nexport type DragState = Inactive | Dragging\n"},"tocStack":[{"id":"what-is-adt","level":1,"text":"ADT 是什么"},{"id":"ts-sumTypes","level":2,"text":["Sum Types"," 和类型"]},{"id":"ts-proTypes","level":2,"text":["Product Types"," 积类型"]},{"id":"sumTypes-and-proTypes","level":1,"text":"通过 ADT 构建复杂世界的抽象"},{"id":"ts-sum-proTypes","level":1,"text":"TS 里 ADT 实践"},{"id":"importantce-of-adt","level":1,"text":"ADT 的重要性"},{"id":"ts-null-safty","level":2,"text":"空值和空安全"},{"id":"ts-object","level":2,"text":"对象"},{"id":"ts-enum","level":2,"text":"enum"},{"id":"union-types","level":2,"text":"Union Types"},{"id":"go-return","level":2,"text":"为什么要喷 Go"},{"id":"ts-null-undefined","level":2,"text":"null undefined"},{"id":"pl-adt-supports","level":1,"text":"评估语言的 ADT"},{"id":"haskell-adt","level":2,"text":"Haskell"},{"id":"swift-adt","level":2,"text":"Swift"},{"id":"kotlin-adt","level":2,"text":"Kotlin"},{"id":"ts-adt","level":2,"text":"TypeScript"},{"id":"golang-adt","level":2,"text":"Go"},{"id":"java-adt","level":2,"text":"Java"},{"id":"brainfuck-adt","level":2,"text":"Brainfuck"},{"id":"links","level":1,"text":"参考"}]}}}