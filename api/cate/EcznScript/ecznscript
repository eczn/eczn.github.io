{"code":0,"data":{"categoryId":"EcznScript","list":[{"id":"ecznscript","title":"EcznScript ?","author":"eczn","tags":[],"category":"EcznScript","time":"2025-03-19T14:55:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"isDraft":false,"fileDeps":[],"wordCount":0}],"current":{"type":"tsx","meta":{"id":"ecznscript","title":"EcznScript ?","author":"eczn","tags":[],"category":"EcznScript","time":"2025-03-19T14:55:00.000Z","type":"article","appTitle":"","appIcon":"","intro":"未定义 intro","cateIntro":"该分类暂无介绍 ~","imgs":[],"isDraft":false,"fileDeps":[],"wordCount":0},"tsxDistPath":"./ecznscript/index.blog.js","ssrContent":"<div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><span class=\"std-sinking --fontTitle\">自</span> 18 年来写 TS 算有 7 年了，近期一个大消息：<br/>ts 官方宣布决定迁移到 tsgo，用 go 移植了 tsc，性能提高约 10 倍</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">老实说一点也不惊讶<sup id=\"1\" class=\"std-footnote-ref\"><span class=\"std-ref-link __inactive\">[1]</span><span class=\"std-ref-warp\" style=\"height:4px\"></span><span class=\"std-ref-content __inactive\" style=\"width:0;left:0;clear:both;top:calc(\n              undefined -\n              ((undefined - undefined) / 2)\n          );height:0px\"><span>我天天喷 ts/js，可以看看往年的博文</span></span></sup><span style=\"position:absolute;width:100%;top:0%;left:0%;display:block\" class=\"PLEASE_IGNORE_ME\"></span>，但从另外一个角度击碎了我：ts 只是 js 的孙子<sup id=\"2\" class=\"std-footnote-ref\"><span class=\"std-ref-link __inactive\">[2]</span><span class=\"std-ref-warp\" style=\"height:4px\"></span><span class=\"std-ref-content __inactive\" style=\"width:0;left:0;clear:both;top:calc(\n              undefined -\n              ((undefined - undefined) / 2)\n          );height:0px\"><span>说好听点叫超集</span></span></sup><span style=\"position:absolute;width:100%;top:0%;left:0%;display:block\" class=\"PLEASE_IGNORE_ME\"></span>，不做一门严肃的编程语言 —— 更深度的 codegen 以及 all-in-one 打包等几乎都没咋做，说难听点就是操着类型体操最后写出来 php 的性能：静态类型没有任何性能上的加成，最后我不得不面对这个事实：tsgo 之后再写 ts 只能渡过一个相对失败的人生，官方自己都放弃 ts 自举，语言其实有重大缺陷，作为用户还是尽早放弃比较好</div><h1 id=\"the-problem-wtih-ts\" class=\"std-title --fontTitle\"><a href=\"#the-problem-wtih-ts\" class=\"markdownIt-Anchor\">#</a> ts 最大的问题 —— 做 js 的孙子<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">TS 由于只做 js 的孙子 —— 好听点叫超集，因此各种严肃的编程语言该做的没做，或只做了半成品，尤其是工程化/打包相关的，而这些匮乏又最终导致源码 ts 仓库变得极其扭曲，我在下面这篇文章有具体细节分析：</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"/b/typescript-52000-checker.ts/\" target=\"_blank\" style=\"background-color:#f0e8f9\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#f0e8f9\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/eczn.github.io?h=-3288832335\" style=\"background-image:url(&quot;/get-favicon/eczn.github.io?h=-3288832335&quot;)\"></span><span class=\"std-link-txt\">TypeScript 52000+ 行的 checker.ts</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">总的来说最主要的问题：</div><ol class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">1.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">namespace 放弃了，也不打算自己做打包，但是市面上的打包都没有想过 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">obj.xxx</div> 的点读开销和 jit 优化开销，这是 ts 仓库变得扭曲的核心原因</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">2.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">没有做静态编译优化，比如说 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">const a = 1 + 1</div> 应该在编译期计算成 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">const a = 2</div> 目前是没有的</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">3.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">静态类型被擦掉了，没有参与代码优化，但任何一门市面上流行的语言里依据静态类型做 codegen 优化是基础操作</div></li></ol><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">上述第二点我在公司内已经通过自行编写 ts 的 custom transformer 插件方式就能实现基础的常量合并了（不超过 400 行就能实现），更高级的优化策略其实并没有系统性的阻碍 —— 只要官方想搞分分钟就能上</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">事实上 codegen 优化 ts 一直有做，比如说 downleveliterator、const-enum、和 decorator 的 meta 元信息输出<sup id=\"3\" class=\"std-footnote-ref\"><span class=\"std-ref-link __inactive\">[3]</span><span class=\"std-ref-warp\" style=\"height:4px\"></span><span class=\"std-ref-content __inactive\" style=\"width:0;left:0;clear:both;top:calc(\n              undefined -\n              ((undefined - undefined) / 2)\n          );height:0px\"><span>但是配合 webpack + ts-loader/esbuild 时，通常都开着 transpileOnly:true 和 isolatedModule:true 种种原因都会导致这些 codegen 优化的能力失效 —— 这其中有很大原因是 TC39 的 ESM 方案没有考虑这种 JIT 优化场景，当然也跟 ts-loader 的性能有关系</span></span></sup><span style=\"position:absolute;width:100%;top:0%;left:0%;display:block\" class=\"PLEASE_IGNORE_ME\"></span>，这些都涉及 codegen 和运行时的修改</div><h1 id=\"js-runtime-where-slow\" class=\"std-title --fontTitle\"><a href=\"#js-runtime-where-slow\" class=\"markdownIt-Anchor\">#</a> JS runtime 慢在哪里？<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">首先依据之前写的 v8 的研究，里面有条结论：只要构造合适，V8 JIT 可以有媲美原生 AOT 的性能，当然也容易出现非常夸张的性能劣化。(这里的媲美指的是没有数量级差距)</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\"><a href=\"/b/v8-asm-detail-of-inline-caches/\" target=\"_blank\" style=\"background-color:#eff4e6\" class=\"std-link --fontSansSerif  _block\" data-minimap-color=\"#eff4e6\"><span class=\"std-link-icon r-link\" data-src=\"/get-favicon/eczn.github.io?h=5005563045\" style=\"background-image:url(&quot;/get-favicon/eczn.github.io?h=5005563045&quot;)\"></span><span class=\"std-link-txt\">V8 Inline Caches 优化及其汇编细节</span></a></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">总的来说, js 遇到下述情况的时候会变慢</div><ol class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">1.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">键值顺序 —— 纯靠人肉不可能保证每次构造对象的时候都保证一样的 key 顺序的，这会让 runtime 的 ICs 失效</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">2.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">基于原型链的 class 实际上是动态的 —— 这导致很多时候 runtime 都优化不了</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">3.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">语言标准的性能 —— 这里特指 js string 的性能，相当糟糕</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">4.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">TC39 特性以及社区实践不一定高性能 —— 比如 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">...</div> <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">for-of</div> 这些，可以看看编译成 es5 后这些特性会变成什么鬼样</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">5.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">打包与性能 —— 读取模块内暴露的方法带的点读操作是有开销的，对象 key 多的时候，点读开销不可忽略</div></li></ol><h1 id=\"EcznScript\" class=\"std-title --fontTitle\"><a href=\"#EcznScript\" class=\"markdownIt-Anchor\">#</a> EcznScript<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">我从职业生涯的一开始就对编程语言的构造相当感兴趣并且有一些学习 &amp; 开发经验，趁着这次 tsgo 发布之际，我计划业余开发一门编译为 js 的语言，目的是解决上面提到的问题，叫做 EcznScript，首先它不是 js 超集 (孙子)，是完全不同于 js 的语言，而且我将直接抄来自 rust / golang / ts 的优秀的设计，并且摒弃其中 js 的一些垃圾鸡肋特性</div><h2 id=\"如何保证键值顺序\" class=\"std-title --fontTitle\">如何保证键值顺序</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">键值顺序对于 JIT 性能来说相当重要，语言设计之处就要考虑这个，因此我决定用 struct 声明类型，并用 struct 来做字面量构造: </div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre  class=\"prismjs rust rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// EcznScript</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  uid<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>  uid<span class=\"token punctuation\">:</span> <span class=\"token lifetime-annotation symbol\">'001</span>'<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  name<span class=\"token punctuation\">:</span> <span class=\"token lifetime-annotation symbol\">'eczn</span>'<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></pre></div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre style=\"overflow: visible\" class=\"prismjs javascript rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// 编译输出 JS</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token comment\">// 自带构造器 &amp; 类型 tag</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">const</span> UserInfo$$Tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">uid<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> UserInfo$$Tag<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  uid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">UserInfo</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>  <span class=\"token comment\">/* uid  */</span> <span class=\"token string\">'001'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  <span class=\"token comment\">/* name */</span> <span class=\"token string\">'eczn'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">struct 编译期即可确定键值顺序，因此即便是顺序不一样了也可以通过编译修正</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre  class=\"prismjs rust rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// EcznScript</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  uid<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>  name<span class=\"token punctuation\">:</span> <span class=\"token lifetime-annotation symbol\">'eczn</span>'<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 顺序不一样</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>  uid<span class=\"token punctuation\">:</span> <span class=\"token lifetime-annotation symbol\">'001</span>'<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span></pre></div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre style=\"overflow: visible\" class=\"prismjs javascript rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// 编译输出 JS</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token comment\">// 自带构造器 &amp; 类型 tag</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">const</span> UserInfo$$Tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">uid<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> UserInfo$$Tag<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>  uid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token keyword\">const</span> __$0 <span class=\"token operator\">=</span> <span class=\"token string\">'eczn'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span><span class=\"token keyword\">const</span> __$1 <span class=\"token operator\">=</span> <span class=\"token string\">'001'</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">UserInfo</span><span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span>  <span class=\"token comment\">/* uid  */</span> __$1<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>  <span class=\"token comment\">/* name */</span> __$0<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></div></div></div><h2 id=\"用-trait-解决-class-的问题\" class=\"std-title --fontTitle\">用 trait 解决 class 的问题</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">class 最大的问题：为了复用代码，但是对于 js 这种动态语言来说 class 反而是一种束缚，而且复杂的 class 几乎无法做高性能 JIT （因为对象是多态的、甚至是巨态的），因此不论是对性能还是可读性，必须要切割 class</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">对于 class 的问题业界已有被广泛接受的方式，那就是基于 interface / trait 来做组合式编程，对应的代表是 golang 和 rust，两者都有很不错的生态和接受度，因此我认为抛弃 class 没有任何问题，下面是一段例子，其中我借鉴了 rust 里对 dyn trait 处理的优秀经验，这使得动态派发实现成为可能，而且将调用开销降到了最低<sup id=\"4\" class=\"std-footnote-ref\"><span class=\"std-ref-link __inactive\">[4]</span><span class=\"std-ref-warp\" style=\"height:4px\"></span><span class=\"std-ref-content __inactive\" style=\"width:0;left:0;clear:both;top:calc(\n              undefined -\n              ((undefined - undefined) / 2)\n          );height:0px\"><span>动态分发那段 JIT 后会相当高效，简单试了下，m4 pro 跑一亿次分发只需要 30ms</span></span></sup><span style=\"position:absolute;width:100%;top:0%;left:0%;display:block\" class=\"PLEASE_IGNORE_ME\"></span></div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre  class=\"prismjs swift rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// EcznScript</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span>  uid<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>  name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span>trait <span class=\"token class-name\">Printable</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span>  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> i32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span>impl <span class=\"token class-name\">Printable</span> <span class=\"token keyword\">for</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span><span class=\"token comment\">// 这里还有用很多细节没想好</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">29</span><span class=\"token keyword\">func</span> <span class=\"token function-definition function\">gg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> impl <span class=\"token class-name\">Printable</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">30</span>  <span class=\"token keyword\">return</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">31</span>    uid<span class=\"token punctuation\">:</span> '<span class=\"token number\">001</span>'<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">32</span>    name<span class=\"token punctuation\">:</span> 'eczn'\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">33</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">34</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">35</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">36</span><span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token function\">gg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">37</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">38</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">2025</span><span class=\"token punctuation\">)</span></pre></div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre style=\"overflow: visible\" class=\"prismjs javascript rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// 编译输出 JS</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">const</span> UserInfo$$Tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token comment\">// 自带构造器</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UserInfo</span> <span class=\"token operator\">=</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">uid<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span>    <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> UserInfo$$Tag<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>    uid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">12</span><span class=\"token keyword\">const</span> Printable$$Print$$Tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">13</span><span class=\"token comment\">// 此处实现了跟 rust 一样的动态分发 (dynamic dispatch)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">14</span><span class=\"token comment\">// https://doc.rust-lang.org/std/keyword.dyn.html</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">15</span><span class=\"token keyword\">function</span> <span class=\"token function\">impl$$Printable$$query</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">objTag<span class=\"token punctuation\">,</span> traitTag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">16</span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objTag <span class=\"token operator\">===</span> UserInfo$$Tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">17</span>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>traitTag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">18</span>      <span class=\"token keyword\">case</span> <span class=\"token literal-property property\">Printable$$Print$$Tag</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> UserInfo$$impl$$Printable$$print\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">19</span>    <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">20</span>  <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">21</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">22</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">23</span><span class=\"token keyword\">function</span> <span class=\"token function\">UserInfo$$impl$$Printable$$print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">self<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">24</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">25</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">26</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">27</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">28</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">29</span><span class=\"token keyword\">function</span> <span class=\"token function\">gg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">30</span>  <span class=\"token keyword\">return</span> <span class=\"token function\">UserInfo</span> <span class=\"token punctuation\">(</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">31</span>    <span class=\"token comment\">/* uid  */</span> <span class=\"token string\">'001'</span><span class=\"token punctuation\">,</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">32</span>    <span class=\"token comment\">/* name */</span> <span class=\"token string\">'eczn'</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">33</span>  <span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">34</span><span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">35</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">36</span><span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token function\">gg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">37</span><span class=\"token comment\">// 有静态类型，因此可以实现动态分发</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">38</span><span class=\"token function\">impl$$Printable$$query</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">,</span> Printable$$Print$$Tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> <span class=\"token number\">2025</span><span class=\"token punctuation\">)</span></pre></div></div></div><h2 id=\"语言标准的性能\" class=\"std-title --fontTitle\">语言标准的性能</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">js 里字符串是不可变的，v8 里对中文字符串的操作几乎都是会产生新的，比如说 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">&quot;你&quot;[0]</div> 这样就会复制一次 index=0 的地方，只有英文才不会有复制 —— 而一个长度为 1 的字符串装箱后占用 12 字节，这会造成一定的性能折损 —— 当然多数情况下并不需要特别关心，除非这类操作变成高频操作，比如正在实现编译器的时候就涉及大量的字符串操作，此时会有大量字符串操作，会相当影响性能</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">golang 里对数组 / 字符串引入了切片这种构造来优化使用效果，我计划也整一个基于 js 的看看效果</div><div class=\"col-main\" style=\"display:flex;margin-bottom:16px\"><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre  class=\"prismjs rust rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// EcznScript</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">// </span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">let</span> <span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，世界！\"</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">let</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">str</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></div></div><div style=\"width:50%;text-align:justify;box-sizing:border-box;padding-left:8px;padding-right:8px\"><div class=\"std-code\"><pre style=\"overflow: visible\" class=\"prismjs javascript rally-runner  \" ><span class=\"line-numbers-rows\" style=\"user-select: none;\">00</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">01</span><span class=\"token comment\">// 编译输出 JS</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">02</span><span class=\"token comment\">//</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">03</span><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'你好，世界！'</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">04</span><span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token function\">_$$slice</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">05</span><span class=\"token keyword\">let</span> str3 <span class=\"token operator\">=</span> <span class=\"token function\">_$$slice</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">06</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">07</span><span class=\"token keyword\">const</span> Slice$$Tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">08</span><span class=\"token keyword\">function</span> <span class=\"token function\">__$$slice</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">09</span>  <span class=\"token comment\">// 这个构造在 v8 下是 12~16 字节，不会复制原字符串</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">10</span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> Slice$$Tag<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end <span class=\"token punctuation\">}</span>\n<span class=\"line-numbers-rows\" style=\"user-select: none;\">11</span><span class=\"token punctuation\">}</span></pre></div></div></div><h2 id=\"tc39-特性以及社区实践不一定高性能\" class=\"std-title --fontTitle\">TC39 特性以及社区实践不一定高性能</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">js0 是近期社区提的概念，来自于 tc39 的特性分为两类：一种是语法糖，比如可选链这些，还有一种是 runtime 机制，比如 generator 这种，因此基于这个分类可以吧 js 标准拆成两份，一份是类似纯 ES5 的 js，只有核心特性，还有一份是各种语法糖等等； 显然一个静态的 js0 性能不会差到跟 native 有数量级差距的，而加入了动态性质后的 js 才是真正慢的根源 （比如 proxy、getter/setter、delete 等等，proxy 我在几年前手动测过：毫秒级的操作可以劣化到秒级</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">for-of 实际上会引入重型无栈协程，实际性能可能相当糟糕，尤其是编译成 es5 后会慢好几倍，再比如 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">fn(...args)</div> 这种方式，实际上会遍历一次 args，性能极其糟糕，再比如 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">function fn(options)</div> 然后 options 上放一堆东西，然后到处 <div class=\"std-inline-code\" data-minimap-color=\"#f5e9e9\">...options</div> 复制 &amp; 合并，实际性能相当糟糕: </div><div class=\"std-img-dynamic-wrapper --fontArticle\"><div class=\"std-img-dynamic\" data-minimap=\"Rect\" style=\"padding-bottom:80.32%\"><img class=\"std-img-dymanic-main r-link __mosaic __loading\" src=\"/tsxs-esm/heavy-runtime.44ea6929f9d84eee.png.mosaic.png\"/><img class=\"std-img-dymanic-main\" src=\"/tsxs-esm/heavy-runtime.44ea6929f9d84eee.png\"/></div></div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">但是上面这些问题很大程度上可以通过现代的编译技术解决，比如 named parameters 以及调用参数调整可以最大程度减少调用开销、静态 struct 和 trait 分发解决方法点读的开销等等</div><h2 id=\"最后一个，打包问题\" class=\"std-title --fontTitle\">最后一个，打包问题</h2><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">前端打包这个概念接近于 native 语言的链接操作 —— 将所有符号和编译后的目标文件 all-in-one 在一个文件内。目前社区内流行的 js 打包方案均没有考虑点读性能问题，EzcnScript 最后还是会打包为单文件的，这个也是必须要解决的一个问题</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">其实曾经 ts 也是可以做打包的：配合 namespace 和 outFile 填为一个文件可以实现，虽然做得很薄，但在 4.x 时代的 ts 源码一直都是这样做的，效果也还可以，EcznScript 也要介入打包成 js 的处理，并且提供 .d.ts 文件供外部 js 做 ffi 使用。</div><h1 id=\"when-it-could-be-done\" class=\"std-title --fontTitle\"><a href=\"#when-it-could-be-done\" class=\"markdownIt-Anchor\">#</a> 几时完成？<i data-minimap=\"Ignore\"> ↵ </i></h1><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">注意，EcznScript 只是一个初步的想法<sup id=\"5\" class=\"std-footnote-ref\"><span class=\"std-ref-link __inactive\">[5]</span><span class=\"std-ref-warp\" style=\"height:4px\"></span><span class=\"std-ref-content __inactive\" style=\"width:0;left:0;clear:both;top:calc(\n              undefined -\n              ((undefined - undefined) / 2)\n          );height:0px\"><span>💡 补充下: <br/>只能说确实是很稚嫩的想法，本文写完后我又看了一些 C / moonbit / wasm 的处理细节，发现如果有泛型的话 trait 的类型可以在编译期确定，此处对 trait 的处理更接近 golang 的处理，即包装成一个 go interface 对象来做 —— 只能说有各有好有坏吧，当然更重要的是：如果我真的要实现这个语言，那我为什么不直接用 moonbit 呢？那可是 Rust with GC ? 所以我预感到后面大概率会弃坑这个 233</span></span></sup><span style=\"position:absolute;width:100%;top:0%;left:0%;display:block\" class=\"PLEASE_IGNORE_ME\"></span>，这里还是简单列几个阶段性的目标，后续我也会在本站持续更新开发进度，当然也可能随时弃坑：</div><ol class=\"numbering-main\" data-minimap-color=\"#DDDDDD\"><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">1.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">实现 lexing &amp; parsing，语法上计划直接抄 rust、go、ts 这三个，runtime 上会参考 rust 和 go 的一些处理，比如 trait，泛型走擦除路线(? 目前还不知道配合 trait 可不可行)</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">2.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">实现基础类型检查 (struct 引用和原始类型)</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">3.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">完成 js codegen 管线, 输出的 js 需要尽可能的静态</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">4.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">基础 LSP + VSCode 适配</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">5.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">完成 trait 系统: 声明、实现、动态分发</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">6.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">高级类型系统：enum-adt、类型推导、泛型等</div></li><li class=\"numbering-item\"><div class=\"numbering-marker numbering-marker-decimal\">7.</div><div class=\"std-para --fontArticle\" data-minimap-color=\"#CCCCCC\">...</div></li></ol>","props":{},"tocStack":[{"id":"the-problem-wtih-ts","level":1,"text":"ts 最大的问题 —— 做 js 的孙子"},{"id":"js-runtime-where-slow","level":1,"text":"JS runtime 慢在哪里？"},{"id":"EcznScript","level":1,"text":"EcznScript"},{"id":"如何保证键值顺序","level":2,"text":"如何保证键值顺序"},{"id":"用-trait-解决-class-的问题","level":2,"text":"用 trait 解决 class 的问题"},{"id":"语言标准的性能","level":2,"text":"语言标准的性能"},{"id":"tc39-特性以及社区实践不一定高性能","level":2,"text":"TC39 特性以及社区实践不一定高性能"},{"id":"最后一个，打包问题","level":2,"text":"最后一个，打包问题"},{"id":"when-it-could-be-done","level":1,"text":"几时完成？"}]}}}